{"version":3,"sources":["webpack:///src/views/performance-test/stress-test.vue","webpack:///./src/views/performance-test/stress-test.vue?aae2","webpack:///./src/views/performance-test/stress-test.vue"],"names":["stress_test","name","data","testConfig","type","url","method","concurrent","duration","cores","intensity","memorySize","pattern","fileSize","operation","testing","monitoring","testResult","testHistory","currentMetrics","cpu","memory","network","disk","charts","result","monitoringData","timestamps","monitoringTimer","computed","isConfigValid","this","mounted","initCharts","loadTestHistory","methods","startTest","_this","asyncToGenerator_default","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","executeTest","sent","addToHistory","$message","success","t0","error","message","finish","stop","stopTest","info","_this2","_callee2","_context2","abrupt","promise_default","resolve","setTimeout","status","startTime","Date","endTime","now","totalRequests","successRequests","Math","floor","avgResponseTime","random","qps","toggleMonitoring","stopMonitoring","startMonitoring","_this3","setInterval","updateMetrics","clearInterval","toLocaleTimeString","push","length","shift","updateCharts","_this4","$nextTick","$refs","cpuChart","echarts","memoryChart","networkChart","diskChart","baseOption","tooltip","trigger","xAxis","yAxis","series","smooth","areaStyle","opacity","setOption","extends_default","itemStyle","color","getTestTypeName","http","getStatusText","running","completed","failed","stopped","formatTime","time","toLocaleString","unshift","pop","saveTestHistory","history","localStorage","getItem","JSON","parse","setItem","stringify_default","viewTestResult","test","beforeDestroy","values_default","forEach","chart","dispose","performance_test_stress_test","render","_vm","_h","$createElement","_c","_self","staticClass","_m","_v","attrs","gutter","span","slot","model","label-width","label","placeholder","value","callback","$$v","$set","expression","min","max","_e","show-stops","loading","disabled","on","click","_s","staticStyle","margin-top","_l","index","key","$event","class","float","padding","ref","height","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/13.f2898870bd85b7684194.js","sourcesContent":["<template>\n  <div class=\"stress-test\">\n    <div class=\"page-header\">\n      <h1>🔧 压力测试工具</h1>\n      <p>配置和执行系统压力测试，实时监控性能指标</p>\n    </div>\n\n    <el-row :gutter=\"20\">\n      <!-- 测试配置 -->\n      <el-col :span=\"8\">\n        <el-card class=\"config-card\">\n          <div slot=\"header\">\n            <span>⚙️ 测试配置</span>\n          </div>\n          \n          <el-form :model=\"testConfig\" label-width=\"100px\">\n            <el-form-item label=\"测试类型\">\n              <el-select v-model=\"testConfig.type\" placeholder=\"选择测试类型\">\n                <el-option label=\"HTTP压力测试\" value=\"http\"></el-option>\n                <el-option label=\"CPU压力测试\" value=\"cpu\"></el-option>\n                <el-option label=\"内存压力测试\" value=\"memory\"></el-option>\n                <el-option label=\"磁盘I/O测试\" value=\"disk\"></el-option>\n              </el-select>\n            </el-form-item>\n\n            <!-- HTTP测试配置 -->\n            <div v-if=\"testConfig.type === 'http'\">\n              <el-form-item label=\"目标URL\">\n                <el-input v-model=\"testConfig.url\" placeholder=\"http://example.com/api\"></el-input>\n              </el-form-item>\n              <el-form-item label=\"请求方法\">\n                <el-select v-model=\"testConfig.method\">\n                  <el-option label=\"GET\" value=\"GET\"></el-option>\n                  <el-option label=\"POST\" value=\"POST\"></el-option>\n                  <el-option label=\"PUT\" value=\"PUT\"></el-option>\n                  <el-option label=\"DELETE\" value=\"DELETE\"></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item label=\"并发用户\">\n                <el-input-number v-model=\"testConfig.concurrent\" :min=\"1\" :max=\"1000\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"测试时长\">\n                <el-input-number v-model=\"testConfig.duration\" :min=\"10\" :max=\"3600\" placeholder=\"秒\"></el-input-number>\n              </el-form-item>\n            </div>\n\n            <!-- CPU测试配置 -->\n            <div v-if=\"testConfig.type === 'cpu'\">\n              <el-form-item label=\"CPU核心数\">\n                <el-input-number v-model=\"testConfig.cores\" :min=\"1\" :max=\"16\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"测试时长\">\n                <el-input-number v-model=\"testConfig.duration\" :min=\"10\" :max=\"3600\" placeholder=\"秒\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"负载强度\">\n                <el-slider v-model=\"testConfig.intensity\" :min=\"10\" :max=\"100\" show-stops></el-slider>\n              </el-form-item>\n            </div>\n\n            <!-- 内存测试配置 -->\n            <div v-if=\"testConfig.type === 'memory'\">\n              <el-form-item label=\"内存大小\">\n                <el-input-number v-model=\"testConfig.memorySize\" :min=\"100\" :max=\"8192\" placeholder=\"MB\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"测试时长\">\n                <el-input-number v-model=\"testConfig.duration\" :min=\"10\" :max=\"3600\" placeholder=\"秒\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"访问模式\">\n                <el-select v-model=\"testConfig.pattern\">\n                  <el-option label=\"顺序访问\" value=\"sequential\"></el-option>\n                  <el-option label=\"随机访问\" value=\"random\"></el-option>\n                </el-select>\n              </el-form-item>\n            </div>\n\n            <!-- 磁盘测试配置 -->\n            <div v-if=\"testConfig.type === 'disk'\">\n              <el-form-item label=\"文件大小\">\n                <el-input-number v-model=\"testConfig.fileSize\" :min=\"10\" :max=\"1024\" placeholder=\"MB\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"测试时长\">\n                <el-input-number v-model=\"testConfig.duration\" :min=\"10\" :max=\"3600\" placeholder=\"秒\"></el-input-number>\n              </el-form-item>\n              <el-form-item label=\"操作类型\">\n                <el-select v-model=\"testConfig.operation\">\n                  <el-option label=\"读取\" value=\"read\"></el-option>\n                  <el-option label=\"写入\" value=\"write\"></el-option>\n                  <el-option label=\"读写混合\" value=\"mixed\"></el-option>\n                </el-select>\n              </el-form-item>\n            </div>\n\n            <el-form-item>\n              <el-button \n                type=\"primary\" \n                @click=\"startTest\" \n                :loading=\"testing\"\n                :disabled=\"!isConfigValid\"\n              >\n                {{ testing ? '测试中...' : '开始测试' }}\n              </el-button>\n              <el-button @click=\"stopTest\" :disabled=\"!testing\">停止测试</el-button>\n            </el-form-item>\n          </el-form>\n        </el-card>\n\n        <!-- 测试历史 -->\n        <el-card class=\"history-card\" style=\"margin-top: 20px;\">\n          <div slot=\"header\">\n            <span>📋 测试历史</span>\n          </div>\n          \n          <div class=\"history-list\">\n            <div \n              v-for=\"(test, index) in testHistory\" \n              :key=\"index\"\n              class=\"history-item\"\n              @click=\"viewTestResult(test)\"\n            >\n              <div class=\"history-info\">\n                <div class=\"history-type\">{{ getTestTypeName(test.type) }}</div>\n                <div class=\"history-time\">{{ formatTime(test.startTime) }}</div>\n              </div>\n              <div class=\"history-status\" :class=\"test.status\">\n                {{ getStatusText(test.status) }}\n              </div>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n\n      <!-- 实时监控 -->\n      <el-col :span=\"16\">\n        <el-card class=\"monitor-card\">\n          <div slot=\"header\">\n            <span>📊 实时监控</span>\n            <el-button \n              style=\"float: right; padding: 3px 0\" \n              type=\"text\" \n              @click=\"toggleMonitoring\"\n            >\n              {{ monitoring ? '停止监控' : '开始监控' }}\n            </el-button>\n          </div>\n          \n          <!-- 监控图表 -->\n          <div class=\"monitor-charts\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"12\">\n                <div class=\"chart-container\">\n                  <h4>CPU使用率</h4>\n                  <div ref=\"cpuChart\" class=\"chart\"></div>\n                </div>\n              </el-col>\n              <el-col :span=\"12\">\n                <div class=\"chart-container\">\n                  <h4>内存使用率</h4>\n                  <div ref=\"memoryChart\" class=\"chart\"></div>\n                </div>\n              </el-col>\n            </el-row>\n            \n            <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n              <el-col :span=\"12\">\n                <div class=\"chart-container\">\n                  <h4>网络I/O</h4>\n                  <div ref=\"networkChart\" class=\"chart\"></div>\n                </div>\n              </el-col>\n              <el-col :span=\"12\">\n                <div class=\"chart-container\">\n                  <h4>磁盘I/O</h4>\n                  <div ref=\"diskChart\" class=\"chart\"></div>\n                </div>\n              </el-col>\n            </el-row>\n          </div>\n\n          <!-- 实时指标 -->\n          <div class=\"metrics-panel\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"6\">\n                <div class=\"metric-item\">\n                  <div class=\"metric-value\">{{ currentMetrics.cpu }}%</div>\n                  <div class=\"metric-label\">CPU使用率</div>\n                </div>\n              </el-col>\n              <el-col :span=\"6\">\n                <div class=\"metric-item\">\n                  <div class=\"metric-value\">{{ currentMetrics.memory }}%</div>\n                  <div class=\"metric-label\">内存使用率</div>\n                </div>\n              </el-col>\n              <el-col :span=\"6\">\n                <div class=\"metric-item\">\n                  <div class=\"metric-value\">{{ currentMetrics.network }}</div>\n                  <div class=\"metric-label\">网络速度</div>\n                </div>\n              </el-col>\n              <el-col :span=\"6\">\n                <div class=\"metric-item\">\n                  <div class=\"metric-value\">{{ currentMetrics.disk }}</div>\n                  <div class=\"metric-label\">磁盘I/O</div>\n                </div>\n              </el-col>\n            </el-row>\n          </div>\n        </el-card>\n\n        <!-- 测试结果 -->\n        <el-card v-if=\"testResult\" class=\"result-card\" style=\"margin-top: 20px;\">\n          <div slot=\"header\">\n            <span>📈 测试结果</span>\n          </div>\n          \n          <div class=\"result-content\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"8\">\n                <div class=\"result-item\">\n                  <div class=\"result-label\">测试类型</div>\n                  <div class=\"result-value\">{{ getTestTypeName(testResult.type) }}</div>\n                </div>\n              </el-col>\n              <el-col :span=\"8\">\n                <div class=\"result-item\">\n                  <div class=\"result-label\">测试时长</div>\n                  <div class=\"result-value\">{{ testResult.duration }}秒</div>\n                </div>\n              </el-col>\n              <el-col :span=\"8\">\n                <div class=\"result-item\">\n                  <div class=\"result-label\">测试状态</div>\n                  <div class=\"result-value\" :class=\"testResult.status\">\n                    {{ getStatusText(testResult.status) }}\n                  </div>\n                </div>\n              </el-col>\n            </el-row>\n\n            <!-- HTTP测试结果 -->\n            <div v-if=\"testResult.type === 'http'\" class=\"http-results\">\n              <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n                <el-col :span=\"6\">\n                  <div class=\"result-item\">\n                    <div class=\"result-label\">总请求数</div>\n                    <div class=\"result-value\">{{ testResult.totalRequests }}</div>\n                  </div>\n                </el-col>\n                <el-col :span=\"6\">\n                  <div class=\"result-item\">\n                    <div class=\"result-label\">成功请求</div>\n                    <div class=\"result-value\">{{ testResult.successRequests }}</div>\n                  </div>\n                </el-col>\n                <el-col :span=\"6\">\n                  <div class=\"result-item\">\n                    <div class=\"result-label\">平均响应时间</div>\n                    <div class=\"result-value\">{{ testResult.avgResponseTime }}ms</div>\n                  </div>\n                </el-col>\n                <el-col :span=\"6\">\n                  <div class=\"result-item\">\n                    <div class=\"result-label\">QPS</div>\n                    <div class=\"result-value\">{{ testResult.qps }}</div>\n                  </div>\n                </el-col>\n              </el-row>\n            </div>\n\n            <!-- 性能指标图表 -->\n            <div class=\"result-charts\" style=\"margin-top: 20px;\">\n              <div ref=\"resultChart\" class=\"chart\" style=\"height: 300px;\"></div>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\n\nexport default {\n  name: 'StressTest',\n  data() {\n    return {\n      testConfig: {\n        type: 'http',\n        url: '',\n        method: 'GET',\n        concurrent: 10,\n        duration: 60,\n        cores: 4,\n        intensity: 80,\n        memorySize: 512,\n        pattern: 'sequential',\n        fileSize: 100,\n        operation: 'mixed'\n      },\n      testing: false,\n      monitoring: false,\n      testResult: null,\n      testHistory: [],\n      currentMetrics: {\n        cpu: 0,\n        memory: 0,\n        network: '0 KB/s',\n        disk: '0 KB/s'\n      },\n      charts: {\n        cpu: null,\n        memory: null,\n        network: null,\n        disk: null,\n        result: null\n      },\n      monitoringData: {\n        cpu: [],\n        memory: [],\n        network: [],\n        disk: [],\n        timestamps: []\n      },\n      monitoringTimer: null\n    }\n  },\n  computed: {\n    isConfigValid() {\n      if (this.testConfig.type === 'http') {\n        return this.testConfig.url && this.testConfig.concurrent > 0 && this.testConfig.duration > 0\n      }\n      return this.testConfig.duration > 0\n    }\n  },\n  mounted() {\n    this.initCharts()\n    this.loadTestHistory()\n  },\n  methods: {\n    async startTest() {\n      this.testing = true\n      this.testResult = null\n      \n      try {\n        // 模拟测试执行\n        const response = await this.executeTest()\n        this.testResult = response\n        this.addToHistory(response)\n        this.$message.success('测试完成')\n      } catch (error) {\n        this.$message.error('测试失败: ' + error.message)\n      } finally {\n        this.testing = false\n      }\n    },\n\n    stopTest() {\n      this.testing = false\n      this.$message.info('测试已停止')\n    },\n\n    async executeTest() {\n      // 模拟测试执行过程\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const result = {\n            type: this.testConfig.type,\n            duration: this.testConfig.duration,\n            status: 'completed',\n            startTime: new Date(),\n            endTime: new Date(Date.now() + this.testConfig.duration * 1000)\n          }\n\n          if (this.testConfig.type === 'http') {\n            result.totalRequests = this.testConfig.concurrent * this.testConfig.duration\n            result.successRequests = Math.floor(result.totalRequests * 0.95)\n            result.avgResponseTime = Math.floor(Math.random() * 200 + 50)\n            result.qps = Math.floor(result.totalRequests / this.testConfig.duration)\n          }\n\n          resolve(result)\n        }, 2000)\n      })\n    },\n\n    toggleMonitoring() {\n      if (this.monitoring) {\n        this.stopMonitoring()\n      } else {\n        this.startMonitoring()\n      }\n    },\n\n    startMonitoring() {\n      this.monitoring = true\n      this.monitoringTimer = setInterval(() => {\n        this.updateMetrics()\n      }, 1000)\n    },\n\n    stopMonitoring() {\n      this.monitoring = false\n      if (this.monitoringTimer) {\n        clearInterval(this.monitoringTimer)\n        this.monitoringTimer = null\n      }\n    },\n\n    updateMetrics() {\n      // 模拟实时指标数据\n      const cpu = Math.floor(Math.random() * 100)\n      const memory = Math.floor(Math.random() * 100)\n      const network = Math.floor(Math.random() * 1000)\n      const disk = Math.floor(Math.random() * 500)\n\n      this.currentMetrics = {\n        cpu: cpu,\n        memory: memory,\n        network: `${network} KB/s`,\n        disk: `${disk} KB/s`\n      }\n\n      // 更新图表数据\n      const now = new Date().toLocaleTimeString()\n      this.monitoringData.timestamps.push(now)\n      this.monitoringData.cpu.push(cpu)\n      this.monitoringData.memory.push(memory)\n      this.monitoringData.network.push(network)\n      this.monitoringData.disk.push(disk)\n\n      // 保持最近50个数据点\n      if (this.monitoringData.timestamps.length > 50) {\n        this.monitoringData.timestamps.shift()\n        this.monitoringData.cpu.shift()\n        this.monitoringData.memory.shift()\n        this.monitoringData.network.shift()\n        this.monitoringData.disk.shift()\n      }\n\n      this.updateCharts()\n    },\n\n    initCharts() {\n      this.$nextTick(() => {\n        if (this.$refs.cpuChart) {\n          this.charts.cpu = echarts.init(this.$refs.cpuChart)\n        }\n        if (this.$refs.memoryChart) {\n          this.charts.memory = echarts.init(this.$refs.memoryChart)\n        }\n        if (this.$refs.networkChart) {\n          this.charts.network = echarts.init(this.$refs.networkChart)\n        }\n        if (this.$refs.diskChart) {\n          this.charts.disk = echarts.init(this.$refs.diskChart)\n        }\n      })\n    },\n\n    updateCharts() {\n      const baseOption = {\n        tooltip: { trigger: 'axis' },\n        xAxis: {\n          type: 'category',\n          data: this.monitoringData.timestamps\n        },\n        yAxis: { type: 'value' },\n        series: [{\n          type: 'line',\n          smooth: true,\n          areaStyle: { opacity: 0.3 }\n        }]\n      }\n\n      if (this.charts.cpu) {\n        this.charts.cpu.setOption({\n          ...baseOption,\n          series: [{\n            ...baseOption.series[0],\n            data: this.monitoringData.cpu,\n            itemStyle: { color: '#409EFF' }\n          }]\n        })\n      }\n\n      if (this.charts.memory) {\n        this.charts.memory.setOption({\n          ...baseOption,\n          series: [{\n            ...baseOption.series[0],\n            data: this.monitoringData.memory,\n            itemStyle: { color: '#67C23A' }\n          }]\n        })\n      }\n\n      if (this.charts.network) {\n        this.charts.network.setOption({\n          ...baseOption,\n          series: [{\n            ...baseOption.series[0],\n            data: this.monitoringData.network,\n            itemStyle: { color: '#E6A23C' }\n          }]\n        })\n      }\n\n      if (this.charts.disk) {\n        this.charts.disk.setOption({\n          ...baseOption,\n          series: [{\n            ...baseOption.series[0],\n            data: this.monitoringData.disk,\n            itemStyle: { color: '#F56C6C' }\n          }]\n        })\n      }\n    },\n\n    getTestTypeName(type) {\n      const names = {\n        http: 'HTTP压力测试',\n        cpu: 'CPU压力测试',\n        memory: '内存压力测试',\n        disk: '磁盘I/O测试'\n      }\n      return names[type] || type\n    },\n\n    getStatusText(status) {\n      const texts = {\n        running: '运行中',\n        completed: '已完成',\n        failed: '失败',\n        stopped: '已停止'\n      }\n      return texts[status] || status\n    },\n\n    formatTime(time) {\n      return new Date(time).toLocaleString()\n    },\n\n    addToHistory(result) {\n      this.testHistory.unshift(result)\n      if (this.testHistory.length > 10) {\n        this.testHistory.pop()\n      }\n      this.saveTestHistory()\n    },\n\n    loadTestHistory() {\n      const history = localStorage.getItem('stressTestHistory')\n      if (history) {\n        this.testHistory = JSON.parse(history)\n      }\n    },\n\n    saveTestHistory() {\n      localStorage.setItem('stressTestHistory', JSON.stringify(this.testHistory))\n    },\n\n    viewTestResult(test) {\n      this.testResult = test\n    }\n  },\n\n  beforeDestroy() {\n    this.stopMonitoring()\n    Object.values(this.charts).forEach(chart => {\n      if (chart) {\n        chart.dispose()\n      }\n    })\n  }\n}\n</script>\n\n<style scoped>\n.stress-test {\n  padding: 20px;\n}\n\n.page-header {\n  margin-bottom: 30px;\n  text-align: center;\n}\n\n.page-header h1 {\n  font-size: 2.5em;\n  color: #2c3e50;\n  margin-bottom: 10px;\n}\n\n.page-header p {\n  font-size: 1.1em;\n  color: #666;\n}\n\n.config-card, .history-card, .monitor-card, .result-card {\n  height: fit-content;\n}\n\n.history-list {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.history-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  margin-bottom: 8px;\n  background: #f8f9fa;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.history-item:hover {\n  background: #e9ecef;\n}\n\n.history-info {\n  flex: 1;\n}\n\n.history-type {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n.history-time {\n  font-size: 0.9em;\n  color: #666;\n  margin-top: 5px;\n}\n\n.history-status {\n  padding: 4px 8px;\n  border-radius: 3px;\n  font-size: 0.8em;\n  font-weight: bold;\n}\n\n.history-status.running {\n  background: #fff3cd;\n  color: #856404;\n}\n\n.history-status.completed {\n  background: #d4edda;\n  color: #155724;\n}\n\n.history-status.failed {\n  background: #f8d7da;\n  color: #721c24;\n}\n\n.history-status.stopped {\n  background: #e2e3e5;\n  color: #383d41;\n}\n\n.monitor-charts {\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  text-align: center;\n}\n\n.chart-container h4 {\n  margin-bottom: 10px;\n  color: #2c3e50;\n}\n\n.chart {\n  height: 200px;\n  width: 100%;\n}\n\n.metrics-panel {\n  background: #f8f9fa;\n  padding: 20px;\n  border-radius: 5px;\n}\n\n.metric-item {\n  text-align: center;\n}\n\n.metric-value {\n  font-size: 2em;\n  font-weight: bold;\n  color: #409EFF;\n  margin-bottom: 5px;\n}\n\n.metric-label {\n  color: #666;\n  font-size: 0.9em;\n}\n\n.result-content {\n  margin-top: 15px;\n}\n\n.result-item {\n  text-align: center;\n  margin-bottom: 15px;\n}\n\n.result-label {\n  color: #666;\n  font-size: 0.9em;\n  margin-bottom: 5px;\n}\n\n.result-value {\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n.result-value.completed {\n  color: #67C23A;\n}\n\n.result-value.failed {\n  color: #F56C6C;\n}\n\n.result-value.running {\n  color: #E6A23C;\n}\n\n.http-results {\n  border-top: 1px solid #e9ecef;\n  padding-top: 20px;\n}\n\n.result-charts {\n  border-top: 1px solid #e9ecef;\n  padding-top: 20px;\n}\n\n@media (max-width: 768px) {\n  .stress-test {\n    padding: 10px;\n  }\n\n  .chart {\n    height: 150px;\n  }\n\n  .metric-value {\n    font-size: 1.5em;\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/performance-test/stress-test.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"stress-test\"},[_vm._m(0),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":8}},[_c('el-card',{staticClass:\"config-card\"},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"⚙️ 测试配置\")])]),_vm._v(\" \"),_c('el-form',{attrs:{\"model\":_vm.testConfig,\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"测试类型\"}},[_c('el-select',{attrs:{\"placeholder\":\"选择测试类型\"},model:{value:(_vm.testConfig.type),callback:function ($$v) {_vm.$set(_vm.testConfig, \"type\", $$v)},expression:\"testConfig.type\"}},[_c('el-option',{attrs:{\"label\":\"HTTP压力测试\",\"value\":\"http\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"CPU压力测试\",\"value\":\"cpu\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"内存压力测试\",\"value\":\"memory\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"磁盘I/O测试\",\"value\":\"disk\"}})],1)],1),_vm._v(\" \"),(_vm.testConfig.type === 'http')?_c('div',[_c('el-form-item',{attrs:{\"label\":\"目标URL\"}},[_c('el-input',{attrs:{\"placeholder\":\"http://example.com/api\"},model:{value:(_vm.testConfig.url),callback:function ($$v) {_vm.$set(_vm.testConfig, \"url\", $$v)},expression:\"testConfig.url\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"请求方法\"}},[_c('el-select',{model:{value:(_vm.testConfig.method),callback:function ($$v) {_vm.$set(_vm.testConfig, \"method\", $$v)},expression:\"testConfig.method\"}},[_c('el-option',{attrs:{\"label\":\"GET\",\"value\":\"GET\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"POST\",\"value\":\"POST\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"PUT\",\"value\":\"PUT\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"DELETE\",\"value\":\"DELETE\"}})],1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"并发用户\"}},[_c('el-input-number',{attrs:{\"min\":1,\"max\":1000},model:{value:(_vm.testConfig.concurrent),callback:function ($$v) {_vm.$set(_vm.testConfig, \"concurrent\", $$v)},expression:\"testConfig.concurrent\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试时长\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":3600,\"placeholder\":\"秒\"},model:{value:(_vm.testConfig.duration),callback:function ($$v) {_vm.$set(_vm.testConfig, \"duration\", $$v)},expression:\"testConfig.duration\"}})],1)],1):_vm._e(),_vm._v(\" \"),(_vm.testConfig.type === 'cpu')?_c('div',[_c('el-form-item',{attrs:{\"label\":\"CPU核心数\"}},[_c('el-input-number',{attrs:{\"min\":1,\"max\":16},model:{value:(_vm.testConfig.cores),callback:function ($$v) {_vm.$set(_vm.testConfig, \"cores\", $$v)},expression:\"testConfig.cores\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试时长\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":3600,\"placeholder\":\"秒\"},model:{value:(_vm.testConfig.duration),callback:function ($$v) {_vm.$set(_vm.testConfig, \"duration\", $$v)},expression:\"testConfig.duration\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"负载强度\"}},[_c('el-slider',{attrs:{\"min\":10,\"max\":100,\"show-stops\":\"\"},model:{value:(_vm.testConfig.intensity),callback:function ($$v) {_vm.$set(_vm.testConfig, \"intensity\", $$v)},expression:\"testConfig.intensity\"}})],1)],1):_vm._e(),_vm._v(\" \"),(_vm.testConfig.type === 'memory')?_c('div',[_c('el-form-item',{attrs:{\"label\":\"内存大小\"}},[_c('el-input-number',{attrs:{\"min\":100,\"max\":8192,\"placeholder\":\"MB\"},model:{value:(_vm.testConfig.memorySize),callback:function ($$v) {_vm.$set(_vm.testConfig, \"memorySize\", $$v)},expression:\"testConfig.memorySize\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试时长\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":3600,\"placeholder\":\"秒\"},model:{value:(_vm.testConfig.duration),callback:function ($$v) {_vm.$set(_vm.testConfig, \"duration\", $$v)},expression:\"testConfig.duration\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"访问模式\"}},[_c('el-select',{model:{value:(_vm.testConfig.pattern),callback:function ($$v) {_vm.$set(_vm.testConfig, \"pattern\", $$v)},expression:\"testConfig.pattern\"}},[_c('el-option',{attrs:{\"label\":\"顺序访问\",\"value\":\"sequential\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"随机访问\",\"value\":\"random\"}})],1)],1)],1):_vm._e(),_vm._v(\" \"),(_vm.testConfig.type === 'disk')?_c('div',[_c('el-form-item',{attrs:{\"label\":\"文件大小\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":1024,\"placeholder\":\"MB\"},model:{value:(_vm.testConfig.fileSize),callback:function ($$v) {_vm.$set(_vm.testConfig, \"fileSize\", $$v)},expression:\"testConfig.fileSize\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试时长\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":3600,\"placeholder\":\"秒\"},model:{value:(_vm.testConfig.duration),callback:function ($$v) {_vm.$set(_vm.testConfig, \"duration\", $$v)},expression:\"testConfig.duration\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"操作类型\"}},[_c('el-select',{model:{value:(_vm.testConfig.operation),callback:function ($$v) {_vm.$set(_vm.testConfig, \"operation\", $$v)},expression:\"testConfig.operation\"}},[_c('el-option',{attrs:{\"label\":\"读取\",\"value\":\"read\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"写入\",\"value\":\"write\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"读写混合\",\"value\":\"mixed\"}})],1)],1)],1):_vm._e(),_vm._v(\" \"),_c('el-form-item',[_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.testing,\"disabled\":!_vm.isConfigValid},on:{\"click\":_vm.startTest}},[_vm._v(\"\\n              \"+_vm._s(_vm.testing ? '测试中...' : '开始测试')+\"\\n            \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"disabled\":!_vm.testing},on:{\"click\":_vm.stopTest}},[_vm._v(\"停止测试\")])],1)],1)],1),_vm._v(\" \"),_c('el-card',{staticClass:\"history-card\",staticStyle:{\"margin-top\":\"20px\"}},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"📋 测试历史\")])]),_vm._v(\" \"),_c('div',{staticClass:\"history-list\"},_vm._l((_vm.testHistory),function(test,index){return _c('div',{key:index,staticClass:\"history-item\",on:{\"click\":function($event){return _vm.viewTestResult(test)}}},[_c('div',{staticClass:\"history-info\"},[_c('div',{staticClass:\"history-type\"},[_vm._v(_vm._s(_vm.getTestTypeName(test.type)))]),_vm._v(\" \"),_c('div',{staticClass:\"history-time\"},[_vm._v(_vm._s(_vm.formatTime(test.startTime)))])]),_vm._v(\" \"),_c('div',{staticClass:\"history-status\",class:test.status},[_vm._v(\"\\n              \"+_vm._s(_vm.getStatusText(test.status))+\"\\n            \")])])}),0)])],1),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":16}},[_c('el-card',{staticClass:\"monitor-card\"},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"📊 实时监控\")]),_vm._v(\" \"),_c('el-button',{staticStyle:{\"float\":\"right\",\"padding\":\"3px 0\"},attrs:{\"type\":\"text\"},on:{\"click\":_vm.toggleMonitoring}},[_vm._v(\"\\n            \"+_vm._s(_vm.monitoring ? '停止监控' : '开始监控')+\"\\n          \")])],1),_vm._v(\" \"),_c('div',{staticClass:\"monitor-charts\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-container\"},[_c('h4',[_vm._v(\"CPU使用率\")]),_vm._v(\" \"),_c('div',{ref:\"cpuChart\",staticClass:\"chart\"})])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-container\"},[_c('h4',[_vm._v(\"内存使用率\")]),_vm._v(\" \"),_c('div',{ref:\"memoryChart\",staticClass:\"chart\"})])])],1),_vm._v(\" \"),_c('el-row',{staticStyle:{\"margin-top\":\"20px\"},attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-container\"},[_c('h4',[_vm._v(\"网络I/O\")]),_vm._v(\" \"),_c('div',{ref:\"networkChart\",staticClass:\"chart\"})])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-container\"},[_c('h4',[_vm._v(\"磁盘I/O\")]),_vm._v(\" \"),_c('div',{ref:\"diskChart\",staticClass:\"chart\"})])])],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"metrics-panel\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-item\"},[_c('div',{staticClass:\"metric-value\"},[_vm._v(_vm._s(_vm.currentMetrics.cpu)+\"%\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"CPU使用率\")])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-item\"},[_c('div',{staticClass:\"metric-value\"},[_vm._v(_vm._s(_vm.currentMetrics.memory)+\"%\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"内存使用率\")])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-item\"},[_c('div',{staticClass:\"metric-value\"},[_vm._v(_vm._s(_vm.currentMetrics.network))]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"网络速度\")])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-item\"},[_c('div',{staticClass:\"metric-value\"},[_vm._v(_vm._s(_vm.currentMetrics.disk))]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"磁盘I/O\")])])])],1)],1)]),_vm._v(\" \"),(_vm.testResult)?_c('el-card',{staticClass:\"result-card\",staticStyle:{\"margin-top\":\"20px\"}},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"📈 测试结果\")])]),_vm._v(\" \"),_c('div',{staticClass:\"result-content\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"测试类型\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.getTestTypeName(_vm.testResult.type)))])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"测试时长\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.testResult.duration)+\"秒\")])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":8}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"测试状态\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\",class:_vm.testResult.status},[_vm._v(\"\\n                  \"+_vm._s(_vm.getStatusText(_vm.testResult.status))+\"\\n                \")])])])],1),_vm._v(\" \"),(_vm.testResult.type === 'http')?_c('div',{staticClass:\"http-results\"},[_c('el-row',{staticStyle:{\"margin-top\":\"20px\"},attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"总请求数\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.testResult.totalRequests))])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"成功请求\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.testResult.successRequests))])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"平均响应时间\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.testResult.avgResponseTime)+\"ms\")])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"result-item\"},[_c('div',{staticClass:\"result-label\"},[_vm._v(\"QPS\")]),_vm._v(\" \"),_c('div',{staticClass:\"result-value\"},[_vm._v(_vm._s(_vm.testResult.qps))])])])],1)],1):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"result-charts\",staticStyle:{\"margin-top\":\"20px\"}},[_c('div',{ref:\"resultChart\",staticClass:\"chart\",staticStyle:{\"height\":\"300px\"}})])],1)]):_vm._e()],1)],1)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page-header\"},[_c('h1',[_vm._v(\"🔧 压力测试工具\")]),_vm._v(\" \"),_c('p',[_vm._v(\"配置和执行系统压力测试，实时监控性能指标\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3a5eb421\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/performance-test/stress-test.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3a5eb421\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./stress-test.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./stress-test.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./stress-test.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3a5eb421\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./stress-test.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3a5eb421\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/performance-test/stress-test.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}