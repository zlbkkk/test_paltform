{"version":3,"sources":["webpack:///./src/api/server-monitor.js","webpack:///src/views/server-monitor/components/ServerConfigDialog.vue","webpack:///./src/views/server-monitor/components/ServerConfigDialog.vue?8bd0","webpack:///./src/views/server-monitor/components/ServerConfigDialog.vue","webpack:///src/views/server-monitor/dashboard.vue","webpack:///./src/views/server-monitor/dashboard.vue?418a","webpack:///./src/views/server-monitor/dashboard.vue"],"names":["testServerConnection","serverId","serverConfig","arguments","length","undefined","request","url","method","data","timeout","getServerMetrics","timeRange","params","ServerConfigDialog","name","props","visible","type","Boolean","default","server","Object","_this","this","dialogVisible","saving","deleting","testing","testResult","formData","id","host","port","auth_type","username","password","private_key_path","key_password","monitor_interval","description","enabled","formRules","required","message","trigger","min","max","pattern","validator","rule","value","callback","Error","computed","isEdit","watch","val","initForm","$emit","methods","_this2","extends_default","$nextTick","$refs","serverForm","clearValidate","testConnection","_this3","asyncToGenerator_default","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","validateField","t0","$message","warning","abrupt","sent","success","error","t1","finish","stop","handleSave","_this4","_callee2","_context2","validate","handleDelete","_this5","_callee3","_context3","$confirm","confirmButtonText","cancelButtonText","handleClose","components_ServerConfigDialog","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","title","width","before-close","on","update:visible","$event","ref","model","rules","label-width","label","prop","placeholder","maxlength","$$v","$set","expression","_v","staticStyle","show-password","_e","rows","loading","icon","click","class","_s","slot","staticRenderFns","dashboard","components","__webpack_require__","normalizeComponent","ssrContext","servers","selectedServer","currentServerInfo","connectionStatus","autoRefresh","showServerConfig","editingServer","currentMetrics","cpu","load_avg","memory_percent","memory_used","memory_total","disk_percent","disk_free","network_sent","network_recv","historicalData","timestamps","memory","disk_read","disk_write","topProcesses","charts","disk","network","refreshTimer","mounted","loadServers","setTimeout","console","log","initCharts","updateCharts","beforeDestroy","stopAutoRefresh","destroyCharts","info","onServerChange","find","s","loadServerData","startAutoRefresh","_callee4","_context4","current","historical","processes","cpuData","firstTime","lastTime","suggestion","refreshData","onTimeRangeChange","toggleAutoRefresh","_this6","setInterval","clearInterval","refreshProcesses","editCurrentServer","onServerSaved","onServerDeleted","getCpuStatusClass","getMemoryStatusClass","getDiskStatusClass","formatBytes","bytes","i","Math","floor","parseFloat","pow","toFixed","_this7","cpuChart","echarts","memoryChart","diskChart","networkChart","updateCpuChart","updateMemoryChart","updateDiskChart","updateNetworkChart","timestampsData","option","tooltip","formatter","xAxis","yAxis","axisLabel","series","smooth","itemStyle","color","areaStyle","opacity","setOption","_this8","diskRead","diskWrite","legend","grid","left","right","top","bottom","_this9","networkIn","networkOut","toggleChartFullscreen","chartType","values_default","forEach","chart","dispose","forceResizeCharts","_this10","resize","reinitCharts","_this11","generateTestData","now","Date","dataPoints","intervalMinutes","time","getTime","push","toLocaleTimeString","sin","random","server_monitor_dashboard","change","_l","key","size","active-text","gutter","span","margin-top","scopedSlots","_u","fn","scope","row","cpu_percent","_m","save","delete","dashboard_Component","dashboard_normalizeComponent","__webpack_exports__"],"mappings":"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","file":"static/js/8.d70b33a3db5947765c54.js","sourcesContent":["import request from '@/utils/request'\n\n// 获取服务器列表\nexport function getServers() {\n  return request({\n    url: '/api/servers',\n    method: 'get'\n  })\n}\n\n// 保存服务器配置\nexport function saveServer(data) {\n  return request({\n    url: data.id ? `/api/servers/${data.id}` : '/api/servers',\n    method: data.id ? 'put' : 'post',\n    data\n  })\n}\n\n// 删除服务器\nexport function deleteServer(serverId) {\n  return request({\n    url: `/api/servers/${serverId}`,\n    method: 'delete'\n  })\n}\n\n// 测试服务器连接\nexport function testServerConnection(serverId, serverConfig = null) {\n  return request({\n    url: serverId ? `/api/servers/${serverId}/test` : '/api/servers/test',\n    method: 'post',\n    data: serverConfig,\n    timeout: 45000 // 连接测试需要更长时间，设置45秒超时\n  })\n}\n\n// 获取服务器监控数据\nexport function getServerMetrics(serverId, timeRange = '1h') {\n  return request({\n    url: `/api/servers/${serverId}/metrics`,\n    method: 'get',\n    params: { timeRange }\n  })\n}\n\n// 获取服务器实时数据\nexport function getServerRealtimeMetrics(serverId) {\n  return request({\n    url: `/api/servers/${serverId}/metrics/realtime`,\n    method: 'get'\n  })\n}\n\n// 获取服务器进程列表\nexport function getServerProcesses(serverId, limit = 10) {\n  return request({\n    url: `/api/servers/${serverId}/processes`,\n    method: 'get',\n    params: { limit }\n  })\n}\n\n// 获取服务器系统信息\nexport function getServerSystemInfo(serverId) {\n  return request({\n    url: `/api/servers/${serverId}/system-info`,\n    method: 'get'\n  })\n}\n\n// 获取服务器历史数据\nexport function getServerHistoricalData(serverId, startTime, endTime, metrics = ['cpu', 'memory', 'disk', 'network']) {\n  return request({\n    url: `/api/servers/${serverId}/historical`,\n    method: 'get',\n    params: {\n      startTime,\n      endTime,\n      metrics: metrics.join(',')\n    }\n  })\n}\n\n// 设置服务器告警规则\nexport function setServerAlertRules(serverId, rules) {\n  return request({\n    url: `/api/servers/${serverId}/alert-rules`,\n    method: 'post',\n    data: { rules }\n  })\n}\n\n// 获取服务器告警历史\nexport function getServerAlerts(serverId, limit = 50) {\n  return request({\n    url: `/api/servers/${serverId}/alerts`,\n    method: 'get',\n    params: { limit }\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/server-monitor.js","<template>\n  <el-dialog\n    :title=\"isEdit ? '编辑服务器' : '添加服务器'\"\n    :visible.sync=\"dialogVisible\"\n    width=\"600px\"\n    :before-close=\"handleClose\"\n    class=\"server-config-dialog\"\n  >\n    <el-form\n      ref=\"serverForm\"\n      :model=\"formData\"\n      :rules=\"formRules\"\n      label-width=\"120px\"\n    >\n      <el-form-item label=\"服务器名称\" prop=\"name\">\n        <el-input\n          v-model=\"formData.name\"\n          placeholder=\"请输入服务器名称\"\n          maxlength=\"50\"\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item label=\"主机地址\" prop=\"host\">\n        <el-input\n          v-model=\"formData.host\"\n          placeholder=\"IP地址或域名，如: 192.168.1.100\"\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item label=\"SSH端口\" prop=\"port\">\n        <el-input-number\n          v-model=\"formData.port\"\n          :min=\"1\"\n          :max=\"65535\"\n          placeholder=\"SSH端口号\"\n          style=\"width: 100%\"\n        ></el-input-number>\n      </el-form-item>\n      \n      <el-form-item label=\"认证方式\" prop=\"auth_type\">\n        <el-radio-group v-model=\"formData.auth_type\">\n          <el-radio label=\"password\">密码认证</el-radio>\n          <el-radio label=\"key\">密钥认证</el-radio>\n        </el-radio-group>\n      </el-form-item>\n      \n      <el-form-item label=\"用户名\" prop=\"username\">\n        <el-input\n          v-model=\"formData.username\"\n          placeholder=\"SSH登录用户名\"\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item \n        v-if=\"formData.auth_type === 'password'\" \n        label=\"密码\" \n        prop=\"password\"\n      >\n        <el-input\n          v-model=\"formData.password\"\n          type=\"password\"\n          placeholder=\"SSH登录密码\"\n          show-password\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item \n        v-if=\"formData.auth_type === 'key'\" \n        label=\"私钥文件\" \n        prop=\"private_key_path\"\n      >\n        <el-input\n          v-model=\"formData.private_key_path\"\n          placeholder=\"私钥文件路径，如: ~/.ssh/id_rsa\"\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item \n        v-if=\"formData.auth_type === 'key'\" \n        label=\"私钥密码\" \n        prop=\"key_password\"\n      >\n        <el-input\n          v-model=\"formData.key_password\"\n          type=\"password\"\n          placeholder=\"私钥密码（如果有）\"\n          show-password\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item label=\"监控间隔\">\n        <el-select v-model=\"formData.monitor_interval\" style=\"width: 100%\">\n          <el-option label=\"10秒\" :value=\"10\"></el-option>\n          <el-option label=\"30秒\" :value=\"30\"></el-option>\n          <el-option label=\"1分钟\" :value=\"60\"></el-option>\n          <el-option label=\"5分钟\" :value=\"300\"></el-option>\n        </el-select>\n        <div class=\"form-tip\">数据采集间隔时间</div>\n      </el-form-item>\n      \n      <el-form-item label=\"描述\">\n        <el-input\n          v-model=\"formData.description\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"服务器描述信息（可选）\"\n          maxlength=\"200\"\n        ></el-input>\n      </el-form-item>\n      \n      <el-form-item label=\"启用监控\">\n        <el-switch v-model=\"formData.enabled\"></el-switch>\n        <div class=\"form-tip\">是否启用对此服务器的监控</div>\n      </el-form-item>\n    </el-form>\n    \n    <div class=\"test-connection\">\n      <el-button \n        @click=\"testConnection\" \n        :loading=\"testing\"\n        icon=\"el-icon-connection\"\n      >\n        测试连接\n      </el-button>\n      <span v-if=\"testResult\" :class=\"testResult.success ? 'test-success' : 'test-error'\">\n        {{ testResult.message }}\n      </span>\n    </div>\n    \n    <span slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"handleClose\">取消</el-button>\n      <el-button \n        v-if=\"isEdit\" \n        type=\"danger\" \n        @click=\"handleDelete\"\n        :loading=\"deleting\"\n      >\n        删除\n      </el-button>\n      <el-button \n        type=\"primary\" \n        @click=\"handleSave\"\n        :loading=\"saving\"\n      >\n        保存\n      </el-button>\n    </span>\n  </el-dialog>\n</template>\n\n<script>\nimport { saveServer, deleteServer, testServerConnection } from '@/api/server-monitor'\n\nexport default {\n  name: 'ServerConfigDialog',\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    server: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      saving: false,\n      deleting: false,\n      testing: false,\n      testResult: null,\n      \n      formData: {\n        id: null,\n        name: '',\n        host: '',\n        port: 22,\n        auth_type: 'password',\n        username: 'root',\n        password: '',\n        private_key_path: '',\n        key_password: '',\n        monitor_interval: 30,\n        description: '',\n        enabled: true\n      },\n      \n      formRules: {\n        name: [\n          { required: true, message: '请输入服务器名称', trigger: 'blur' },\n          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\n        ],\n        host: [\n          { required: true, message: '请输入主机地址', trigger: 'blur' },\n          { \n            pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*$/,\n            message: '请输入有效的IP地址或域名',\n            trigger: 'blur'\n          }\n        ],\n        port: [\n          { required: true, message: '请输入端口号', trigger: 'blur' },\n          { type: 'number', min: 1, max: 65535, message: '端口号范围 1-65535', trigger: 'blur' }\n        ],\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' }\n        ],\n        password: [\n          { \n            validator: (rule, value, callback) => {\n              if (this.formData.auth_type === 'password' && !value) {\n                callback(new Error('请输入密码'))\n              } else {\n                callback()\n              }\n            }, \n            trigger: 'blur' \n          }\n        ],\n        private_key_path: [\n          { \n            validator: (rule, value, callback) => {\n              if (this.formData.auth_type === 'key' && !value) {\n                callback(new Error('请输入私钥文件路径'))\n              } else {\n                callback()\n              }\n            }, \n            trigger: 'blur' \n          }\n        ]\n      }\n    }\n  },\n  computed: {\n    isEdit() {\n      return this.server && this.server.id\n    }\n  },\n  watch: {\n    visible(val) {\n      this.dialogVisible = val\n      if (val) {\n        this.initForm()\n        this.testResult = null\n      }\n    },\n    dialogVisible(val) {\n      this.$emit('update:visible', val)\n    }\n  },\n  methods: {\n    initForm() {\n      if (this.server) {\n        // 编辑模式\n        this.formData = {\n          ...this.formData,\n          ...this.server\n        }\n      } else {\n        // 新增模式\n        this.formData = {\n          id: null,\n          name: '',\n          host: '',\n          port: 22,\n          auth_type: 'password',\n          username: 'root',\n          password: '',\n          private_key_path: '',\n          key_password: '',\n          monitor_interval: 30,\n          description: '',\n          enabled: true\n        }\n      }\n      \n      // 清除验证结果\n      this.$nextTick(() => {\n        if (this.$refs.serverForm) {\n          this.$refs.serverForm.clearValidate()\n        }\n      })\n    },\n    \n    async testConnection() {\n      // 先验证必填字段\n      try {\n        await this.$refs.serverForm.validateField(['name', 'host', 'port', 'username'])\n      } catch (error) {\n        this.$message.warning('请先填写完整的连接信息')\n        return\n      }\n      \n      this.testing = true\n      this.testResult = null\n      \n      try {\n        const response = await testServerConnection(null, this.formData)\n        \n        this.testResult = {\n          success: response.success,\n          message: response.success ? '连接成功！' : response.error\n        }\n        \n        if (response.success) {\n          this.$message.success('服务器连接测试成功')\n        } else {\n          this.$message.error('连接失败: ' + response.error)\n        }\n      } catch (error) {\n        this.testResult = {\n          success: false,\n          message: '连接测试失败: ' + error.message\n        }\n        this.$message.error('连接测试失败: ' + error.message)\n      } finally {\n        this.testing = false\n      }\n    },\n    \n    async handleSave() {\n      try {\n        await this.$refs.serverForm.validate()\n      } catch (error) {\n        return\n      }\n      \n      this.saving = true\n      \n      try {\n        const response = await saveServer(this.formData)\n        \n        if (response.success) {\n          this.$message.success(this.isEdit ? '服务器更新成功' : '服务器添加成功')\n          this.$emit('save', response.data)\n        } else {\n          this.$message.error(response.error || '保存失败')\n        }\n      } catch (error) {\n        this.$message.error('保存失败: ' + error.message)\n      } finally {\n        this.saving = false\n      }\n    },\n    \n    async handleDelete() {\n      if (!this.isEdit) return\n      \n      try {\n        await this.$confirm('确定要删除这个服务器配置吗？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        })\n      } catch (error) {\n        return\n      }\n      \n      this.deleting = true\n      \n      try {\n        const response = await deleteServer(this.formData.id)\n        \n        if (response.success) {\n          this.$message.success('服务器删除成功')\n          this.$emit('delete', this.formData.id)\n        } else {\n          this.$message.error(response.error || '删除失败')\n        }\n      } catch (error) {\n        this.$message.error('删除失败: ' + error.message)\n      } finally {\n        this.deleting = false\n      }\n    },\n    \n    handleClose() {\n      this.dialogVisible = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n.server-config-dialog {\n  color: #d9d9d9;\n}\n\n.form-tip {\n  font-size: 12px;\n  color: #8c8c8c;\n  margin-top: 5px;\n}\n\n.test-connection {\n  margin: 20px 0;\n  padding: 15px;\n  background: #1f2329;\n  border-radius: 4px;\n  border: 1px solid #2f3349;\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.test-success {\n  color: #52c41a;\n  font-weight: bold;\n}\n\n.test-error {\n  color: #f5222d;\n  font-weight: bold;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n/* Element UI 样式覆盖 */\n.server-config-dialog .el-dialog {\n  background: #1f2329;\n  border: 1px solid #2f3349;\n}\n\n.server-config-dialog .el-dialog__header {\n  background: #262c36;\n  border-bottom: 1px solid #2f3349;\n}\n\n.server-config-dialog .el-dialog__title {\n  color: #ffffff;\n}\n\n.server-config-dialog .el-form-item__label {\n  color: #d9d9d9;\n}\n\n.server-config-dialog .el-input__inner {\n  background: #262c36;\n  border-color: #2f3349;\n  color: #d9d9d9;\n}\n\n.server-config-dialog .el-input__inner:focus {\n  border-color: #52c41a;\n}\n\n.server-config-dialog .el-textarea__inner {\n  background: #262c36;\n  border-color: #2f3349;\n  color: #d9d9d9;\n}\n\n.server-config-dialog .el-textarea__inner:focus {\n  border-color: #52c41a;\n}\n\n.server-config-dialog .el-radio__label {\n  color: #d9d9d9;\n}\n\n.server-config-dialog .el-radio__input.is-checked .el-radio__inner {\n  background: #52c41a;\n  border-color: #52c41a;\n}\n\n.server-config-dialog .el-select .el-input__inner {\n  background: #262c36;\n  border-color: #2f3349;\n  color: #d9d9d9;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/server-monitor/components/ServerConfigDialog.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('el-dialog',{staticClass:\"server-config-dialog\",attrs:{\"title\":_vm.isEdit ? '编辑服务器' : '添加服务器',\"visible\":_vm.dialogVisible,\"width\":\"600px\",\"before-close\":_vm.handleClose},on:{\"update:visible\":function($event){_vm.dialogVisible=$event}}},[_c('el-form',{ref:\"serverForm\",attrs:{\"model\":_vm.formData,\"rules\":_vm.formRules,\"label-width\":\"120px\"}},[_c('el-form-item',{attrs:{\"label\":\"服务器名称\",\"prop\":\"name\"}},[_c('el-input',{attrs:{\"placeholder\":\"请输入服务器名称\",\"maxlength\":\"50\"},model:{value:(_vm.formData.name),callback:function ($$v) {_vm.$set(_vm.formData, \"name\", $$v)},expression:\"formData.name\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"主机地址\",\"prop\":\"host\"}},[_c('el-input',{attrs:{\"placeholder\":\"IP地址或域名，如: 192.168.1.100\"},model:{value:(_vm.formData.host),callback:function ($$v) {_vm.$set(_vm.formData, \"host\", $$v)},expression:\"formData.host\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"SSH端口\",\"prop\":\"port\"}},[_c('el-input-number',{staticStyle:{\"width\":\"100%\"},attrs:{\"min\":1,\"max\":65535,\"placeholder\":\"SSH端口号\"},model:{value:(_vm.formData.port),callback:function ($$v) {_vm.$set(_vm.formData, \"port\", $$v)},expression:\"formData.port\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"认证方式\",\"prop\":\"auth_type\"}},[_c('el-radio-group',{model:{value:(_vm.formData.auth_type),callback:function ($$v) {_vm.$set(_vm.formData, \"auth_type\", $$v)},expression:\"formData.auth_type\"}},[_c('el-radio',{attrs:{\"label\":\"password\"}},[_vm._v(\"密码认证\")]),_vm._v(\" \"),_c('el-radio',{attrs:{\"label\":\"key\"}},[_vm._v(\"密钥认证\")])],1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"用户名\",\"prop\":\"username\"}},[_c('el-input',{attrs:{\"placeholder\":\"SSH登录用户名\"},model:{value:(_vm.formData.username),callback:function ($$v) {_vm.$set(_vm.formData, \"username\", $$v)},expression:\"formData.username\"}})],1),_vm._v(\" \"),(_vm.formData.auth_type === 'password')?_c('el-form-item',{attrs:{\"label\":\"密码\",\"prop\":\"password\"}},[_c('el-input',{attrs:{\"type\":\"password\",\"placeholder\":\"SSH登录密码\",\"show-password\":\"\"},model:{value:(_vm.formData.password),callback:function ($$v) {_vm.$set(_vm.formData, \"password\", $$v)},expression:\"formData.password\"}})],1):_vm._e(),_vm._v(\" \"),(_vm.formData.auth_type === 'key')?_c('el-form-item',{attrs:{\"label\":\"私钥文件\",\"prop\":\"private_key_path\"}},[_c('el-input',{attrs:{\"placeholder\":\"私钥文件路径，如: ~/.ssh/id_rsa\"},model:{value:(_vm.formData.private_key_path),callback:function ($$v) {_vm.$set(_vm.formData, \"private_key_path\", $$v)},expression:\"formData.private_key_path\"}})],1):_vm._e(),_vm._v(\" \"),(_vm.formData.auth_type === 'key')?_c('el-form-item',{attrs:{\"label\":\"私钥密码\",\"prop\":\"key_password\"}},[_c('el-input',{attrs:{\"type\":\"password\",\"placeholder\":\"私钥密码（如果有）\",\"show-password\":\"\"},model:{value:(_vm.formData.key_password),callback:function ($$v) {_vm.$set(_vm.formData, \"key_password\", $$v)},expression:\"formData.key_password\"}})],1):_vm._e(),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"监控间隔\"}},[_c('el-select',{staticStyle:{\"width\":\"100%\"},model:{value:(_vm.formData.monitor_interval),callback:function ($$v) {_vm.$set(_vm.formData, \"monitor_interval\", $$v)},expression:\"formData.monitor_interval\"}},[_c('el-option',{attrs:{\"label\":\"10秒\",\"value\":10}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"30秒\",\"value\":30}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"1分钟\",\"value\":60}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"5分钟\",\"value\":300}})],1),_vm._v(\" \"),_c('div',{staticClass:\"form-tip\"},[_vm._v(\"数据采集间隔时间\")])],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"描述\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":3,\"placeholder\":\"服务器描述信息（可选）\",\"maxlength\":\"200\"},model:{value:(_vm.formData.description),callback:function ($$v) {_vm.$set(_vm.formData, \"description\", $$v)},expression:\"formData.description\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"启用监控\"}},[_c('el-switch',{model:{value:(_vm.formData.enabled),callback:function ($$v) {_vm.$set(_vm.formData, \"enabled\", $$v)},expression:\"formData.enabled\"}}),_vm._v(\" \"),_c('div',{staticClass:\"form-tip\"},[_vm._v(\"是否启用对此服务器的监控\")])],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"test-connection\"},[_c('el-button',{attrs:{\"loading\":_vm.testing,\"icon\":\"el-icon-connection\"},on:{\"click\":_vm.testConnection}},[_vm._v(\"\\n      测试连接\\n    \")]),_vm._v(\" \"),(_vm.testResult)?_c('span',{class:_vm.testResult.success ? 'test-success' : 'test-error'},[_vm._v(\"\\n      \"+_vm._s(_vm.testResult.message)+\"\\n    \")]):_vm._e()],1),_vm._v(\" \"),_c('span',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":_vm.handleClose}},[_vm._v(\"取消\")]),_vm._v(\" \"),(_vm.isEdit)?_c('el-button',{attrs:{\"type\":\"danger\",\"loading\":_vm.deleting},on:{\"click\":_vm.handleDelete}},[_vm._v(\"\\n      删除\\n    \")]):_vm._e(),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.saving},on:{\"click\":_vm.handleSave}},[_vm._v(\"\\n      保存\\n    \")])],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-20a0d847\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/server-monitor/components/ServerConfigDialog.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-20a0d847\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./ServerConfigDialog.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ServerConfigDialog.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ServerConfigDialog.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-20a0d847\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./ServerConfigDialog.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-20a0d847\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/server-monitor/components/ServerConfigDialog.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"server-monitor\">\n    <!-- 顶部控制栏 -->\n    <div class=\"monitor-header\">\n      <div class=\"server-selector\">\n        <el-select v-model=\"selectedServer\" placeholder=\"选择服务器\" @change=\"onServerChange\">\n          <el-option\n            v-for=\"server in servers\"\n            :key=\"server.id\"\n            :label=\"`${server.name} (${server.host})`\"\n            :value=\"server.id\"\n          >\n          </el-option>\n        </el-select>\n        <el-button type=\"primary\" @click=\"showServerConfig = true\">配置服务器</el-button>\n      </div>\n      \n      <div class=\"time-controls\">\n        <el-select v-model=\"timeRange\" @change=\"onTimeRangeChange\">\n          <el-option label=\"最近5分钟\" value=\"5m\"></el-option>\n          <el-option label=\"最近15分钟\" value=\"15m\"></el-option>\n          <el-option label=\"最近1小时\" value=\"1h\"></el-option>\n          <el-option label=\"最近6小时\" value=\"6h\"></el-option>\n          <el-option label=\"最近24小时\" value=\"24h\"></el-option>\n        </el-select>\n        \n        <el-button @click=\"refreshData\" :loading=\"loading\">\n          <i class=\"el-icon-refresh\"></i> 刷新\n        </el-button>\n\n        <el-button @click=\"reinitCharts\" type=\"warning\" size=\"small\">\n          <i class=\"el-icon-refresh-right\"></i> 重新初始化图表\n        </el-button>\n\n        <el-button @click=\"generateTestData\" type=\"success\" size=\"small\">\n          <i class=\"el-icon-data-line\"></i> 生成测试数据\n        </el-button>\n\n        <el-switch\n          v-model=\"autoRefresh\"\n          active-text=\"自动刷新\"\n          @change=\"toggleAutoRefresh\"\n        ></el-switch>\n      </div>\n    </div>\n\n    <!-- 服务器状态概览 -->\n    <div v-if=\"selectedServer\" class=\"server-overview\">\n      <div class=\"server-info\">\n        <h2>{{ currentServerInfo.name }}</h2>\n        <div class=\"server-details\">\n          <span>{{ currentServerInfo.host }}:{{ currentServerInfo.port }}</span>\n          <el-tag :type=\"connectionStatus === 'connected' ? 'success' : 'danger'\" size=\"small\">\n            {{ connectionStatus === 'connected' ? '已连接' : '连接失败' }}\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <!-- 关键指标卡片 -->\n    <div v-if=\"selectedServer && connectionStatus === 'connected'\" class=\"metrics-cards\">\n      <el-row :gutter=\"20\">\n        <el-col :span=\"6\">\n          <div class=\"metric-card cpu\">\n            <div class=\"metric-icon\">\n              <i class=\"el-icon-cpu\"></i>\n            </div>\n            <div class=\"metric-content\">\n              <div class=\"metric-value\" :class=\"getCpuStatusClass(currentMetrics.cpu)\">\n                {{ currentMetrics.cpu }}%\n              </div>\n              <div class=\"metric-label\">CPU使用率</div>\n              <div class=\"metric-detail\">\n                负载: {{ currentMetrics.load_avg }}\n              </div>\n            </div>\n          </div>\n        </el-col>\n        \n        <el-col :span=\"6\">\n          <div class=\"metric-card memory\">\n            <div class=\"metric-icon\">\n              <i class=\"el-icon-memory-card\"></i>\n            </div>\n            <div class=\"metric-content\">\n              <div class=\"metric-value\" :class=\"getMemoryStatusClass(currentMetrics.memory_percent)\">\n                {{ currentMetrics.memory_percent }}%\n              </div>\n              <div class=\"metric-label\">内存使用率</div>\n              <div class=\"metric-detail\">\n                {{ currentMetrics.memory_used }}GB / {{ currentMetrics.memory_total }}GB\n              </div>\n            </div>\n          </div>\n        </el-col>\n        \n        <el-col :span=\"6\">\n          <div class=\"metric-card disk\">\n            <div class=\"metric-icon\">\n              <i class=\"el-icon-folder\"></i>\n            </div>\n            <div class=\"metric-content\">\n              <div class=\"metric-value\" :class=\"getDiskStatusClass(currentMetrics.disk_percent)\">\n                {{ currentMetrics.disk_percent }}%\n              </div>\n              <div class=\"metric-label\">磁盘使用率</div>\n              <div class=\"metric-detail\">\n                剩余: {{ currentMetrics.disk_free }}GB\n              </div>\n            </div>\n          </div>\n        </el-col>\n        \n        <el-col :span=\"6\">\n          <div class=\"metric-card network\">\n            <div class=\"metric-icon\">\n              <i class=\"el-icon-connection\"></i>\n            </div>\n            <div class=\"metric-content\">\n              <div class=\"metric-value\">\n                {{ formatBytes(currentMetrics.network_sent) }}/s\n              </div>\n              <div class=\"metric-label\">网络发送</div>\n              <div class=\"metric-detail\">\n                接收: {{ formatBytes(currentMetrics.network_recv) }}/s\n              </div>\n            </div>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n\n    <!-- 图表区域 -->\n    <div v-if=\"selectedServer && connectionStatus === 'connected'\" class=\"charts-section\">\n      <el-row :gutter=\"20\">\n        <el-col :span=\"12\">\n          <div class=\"chart-panel\">\n            <div class=\"panel-header\">\n              <h3>CPU使用率趋势</h3>\n              <div class=\"panel-controls\">\n                <el-button size=\"mini\" @click=\"toggleChartFullscreen('cpu')\">\n                  <i class=\"el-icon-full-screen\"></i>\n                </el-button>\n              </div>\n            </div>\n            <div ref=\"cpuChart\" class=\"chart-container\"></div>\n          </div>\n        </el-col>\n        \n        <el-col :span=\"12\">\n          <div class=\"chart-panel\">\n            <div class=\"panel-header\">\n              <h3>内存使用趋势</h3>\n              <div class=\"panel-controls\">\n                <el-button size=\"mini\" @click=\"toggleChartFullscreen('memory')\">\n                  <i class=\"el-icon-full-screen\"></i>\n                </el-button>\n              </div>\n            </div>\n            <div ref=\"memoryChart\" class=\"chart-container\"></div>\n          </div>\n        </el-col>\n      </el-row>\n      \n      <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n        <el-col :span=\"12\">\n          <div class=\"chart-panel\">\n            <div class=\"panel-header\">\n              <h3>磁盘I/O</h3>\n              <div class=\"panel-controls\">\n                <el-button size=\"mini\" @click=\"toggleChartFullscreen('disk')\">\n                  <i class=\"el-icon-full-screen\"></i>\n                </el-button>\n              </div>\n            </div>\n            <div ref=\"diskChart\" class=\"chart-container\"></div>\n          </div>\n        </el-col>\n        \n        <el-col :span=\"12\">\n          <div class=\"chart-panel\">\n            <div class=\"panel-header\">\n              <h3>网络流量</h3>\n              <div class=\"panel-controls\">\n                <el-button size=\"mini\" @click=\"toggleChartFullscreen('network')\">\n                  <i class=\"el-icon-full-screen\"></i>\n                </el-button>\n              </div>\n            </div>\n            <div ref=\"networkChart\" class=\"chart-container\"></div>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n\n    <!-- 进程监控 -->\n    <div v-if=\"selectedServer && connectionStatus === 'connected'\" class=\"process-section\">\n      <div class=\"section-header\">\n        <h3>进程监控</h3>\n        <el-button size=\"mini\" @click=\"refreshProcesses\">刷新进程</el-button>\n      </div>\n      \n      <el-table :data=\"topProcesses\" style=\"width: 100%\">\n        <el-table-column prop=\"pid\" label=\"PID\" width=\"80\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"进程名\" width=\"200\"></el-table-column>\n        <el-table-column prop=\"cpu_percent\" label=\"CPU%\" width=\"100\">\n          <template slot-scope=\"scope\">\n            <span :class=\"getCpuStatusClass(scope.row.cpu_percent)\">\n              {{ scope.row.cpu_percent }}%\n            </span>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memory_percent\" label=\"内存%\" width=\"100\">\n          <template slot-scope=\"scope\">\n            <span :class=\"getMemoryStatusClass(scope.row.memory_percent)\">\n              {{ scope.row.memory_percent }}%\n            </span>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memory_mb\" label=\"内存(MB)\" width=\"120\"></el-table-column>\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\"></el-table-column>\n        <el-table-column prop=\"create_time\" label=\"启动时间\"></el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 无服务器选择提示 -->\n    <div v-if=\"!selectedServer\" class=\"no-server-selected\">\n      <div class=\"empty-state\">\n        <i class=\"el-icon-monitor\"></i>\n        <h3>欢迎使用服务器监控系统</h3>\n        <p>请先配置要监控的服务器</p>\n        <div class=\"setup-steps\">\n          <div class=\"step\">\n            <span class=\"step-number\">1</span>\n            <span class=\"step-text\">点击\"配置服务器\"按钮</span>\n          </div>\n          <div class=\"step\">\n            <span class=\"step-number\">2</span>\n            <span class=\"step-text\">填写服务器连接信息</span>\n          </div>\n          <div class=\"step\">\n            <span class=\"step-number\">3</span>\n            <span class=\"step-text\">测试连接并保存配置</span>\n          </div>\n          <div class=\"step\">\n            <span class=\"step-number\">4</span>\n            <span class=\"step-text\">选择服务器开始监控</span>\n          </div>\n        </div>\n        <el-button type=\"primary\" size=\"large\" @click=\"showServerConfig = true\">\n          <i class=\"el-icon-plus\"></i> 配置第一台服务器\n        </el-button>\n      </div>\n    </div>\n\n    <!-- 连接失败提示 -->\n    <div v-if=\"selectedServer && connectionStatus === 'disconnected'\" class=\"connection-failed\">\n      <div class=\"error-state\">\n        <i class=\"el-icon-warning\"></i>\n        <h3>无法连接到服务器</h3>\n        <p>{{ currentServerInfo.name }} ({{ currentServerInfo.host }})</p>\n        <div class=\"error-details\">\n          <p>可能的原因：</p>\n          <ul>\n            <li>服务器未启动或网络不通</li>\n            <li>SSH服务未运行或端口被阻拦</li>\n            <li>用户名或密码错误</li>\n            <li>防火墙阻止连接</li>\n          </ul>\n        </div>\n        <div class=\"error-actions\">\n          <el-button @click=\"testConnection\" :loading=\"loading\">\n            <i class=\"el-icon-refresh\"></i> 重新连接\n          </el-button>\n          <el-button type=\"primary\" @click=\"editCurrentServer\">\n            <i class=\"el-icon-edit\"></i> 编辑配置\n          </el-button>\n          <el-button @click=\"loadServerData\">\n            <i class=\"el-icon-connection\"></i> 获取数据\n          </el-button>\n        </div>\n      </div>\n    </div>\n\n    <!-- 服务器配置对话框 -->\n    <server-config-dialog\n      :visible.sync=\"showServerConfig\"\n      :server=\"editingServer\"\n      @save=\"onServerSaved\"\n      @delete=\"onServerDeleted\"\n    ></server-config-dialog>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport ServerConfigDialog from './components/ServerConfigDialog.vue'\nimport { getServers, getServerMetrics, testServerConnection } from '@/api/server-monitor'\n\nexport default {\n  name: 'ServerMonitorDashboard',\n  components: {\n    ServerConfigDialog\n  },\n  data() {\n    return {\n      servers: [],\n      selectedServer: null,\n      currentServerInfo: {},\n      connectionStatus: 'disconnected', // connected, disconnected, connecting\n      timeRange: '1h',\n      autoRefresh: true,\n      loading: false,\n      showServerConfig: false,\n      editingServer: null,\n      \n      // 当前指标\n      currentMetrics: {\n        cpu: 0,\n        load_avg: 0,\n        memory_percent: 0,\n        memory_used: 0,\n        memory_total: 0,\n        disk_percent: 0,\n        disk_free: 0,\n        network_sent: 0,\n        network_recv: 0\n      },\n      \n      // 历史数据\n      historicalData: {\n        timestamps: [],\n        cpu: [],\n        memory: [],\n        disk_read: [],\n        disk_write: [],\n        network_sent: [],\n        network_recv: []\n      },\n      \n      // 进程数据\n      topProcesses: [],\n      \n      // 图表实例\n      charts: {\n        cpu: null,\n        memory: null,\n        disk: null,\n        network: null\n      },\n      \n      // 自动刷新定时器\n      refreshTimer: null\n    }\n  },\n  mounted() {\n    this.loadServers()\n    // 延迟初始化图表，确保DOM完全渲染\n    this.$nextTick(() => {\n      setTimeout(() => {\n        console.log('🚀 开始初始化图表...')\n        this.initCharts()\n        // 再次延迟，确保图表完全初始化后再尝试更新\n        setTimeout(() => {\n          if (this.historicalData && this.historicalData.timestamps && this.historicalData.timestamps.length > 0) {\n            console.log('🔄 延迟更新图表数据')\n            this.updateCharts()\n          }\n        }, 500)\n      }, 200)\n    })\n  },\n  beforeDestroy() {\n    this.stopAutoRefresh()\n    this.destroyCharts()\n  },\n  methods: {\n    async loadServers() {\n      try {\n        const response = await getServers()\n        this.servers = response.data || []\n\n        // 不自动选择服务器，让用户手动选择\n        if (this.servers.length === 0) {\n          this.$message.info('暂无配置的服务器，请先添加服务器配置')\n        }\n      } catch (error) {\n        this.$message.error('加载服务器列表失败: ' + error.message)\n      }\n    },\n\n    async onServerChange() {\n      if (!this.selectedServer) return\n      \n      this.currentServerInfo = this.servers.find(s => s.id === this.selectedServer) || {}\n      this.connectionStatus = 'connecting'\n      \n      // 测试连接\n      await this.testConnection()\n\n      if (this.connectionStatus === 'connected') {\n        // 确保图表已初始化\n        if (!this.charts.cpu || !this.charts.memory || !this.charts.disk || !this.charts.network) {\n          console.log('🔄 重新初始化图表...')\n          this.initCharts()\n          // 等待图表初始化完成\n          await this.$nextTick()\n        }\n\n        // 加载数据\n        await this.loadServerData()\n\n        // 启动自动刷新\n        if (this.autoRefresh) {\n          this.startAutoRefresh()\n        }\n      }\n    },\n\n    async testConnection() {\n      try {\n        const response = await testServerConnection(this.selectedServer)\n        this.connectionStatus = response.success ? 'connected' : 'disconnected'\n        \n        if (!response.success) {\n          this.$message.error('服务器连接失败: ' + response.error)\n        }\n      } catch (error) {\n        this.connectionStatus = 'disconnected'\n        this.$message.error('连接测试失败: ' + error.message)\n      }\n    },\n\n    async loadServerData() {\n      if (!this.selectedServer) return\n\n      this.loading = true\n      try {\n        const response = await getServerMetrics(this.selectedServer, this.timeRange)\n\n        if (response.success) {\n          this.currentMetrics = response.data.current\n          this.historicalData = response.data.historical\n          this.topProcesses = response.data.processes || []\n\n          console.log('📊 获取到历史数据:', {\n            timeRange: this.timeRange,\n            timestamps: this.historicalData.timestamps ? this.historicalData.timestamps.length : 0,\n            cpuData: this.historicalData.cpu ? this.historicalData.cpu.length : 0,\n            firstTime: this.historicalData.timestamps ? this.historicalData.timestamps[0] : null,\n            lastTime: this.historicalData.timestamps ? this.historicalData.timestamps[this.historicalData.timestamps.length - 1] : null\n          })\n\n          // 更新图表\n          this.updateCharts()\n\n          // 确保连接状态为已连接\n          if (this.connectionStatus !== 'connected') {\n            this.connectionStatus = 'connected'\n          }\n        } else {\n          // 数据获取失败，可能是连接问题\n          this.connectionStatus = 'disconnected'\n          this.$message.error('获取服务器数据失败: ' + response.error)\n\n          if (response.suggestion) {\n            this.$message.info(response.suggestion)\n          }\n\n          // 清空数据\n          this.currentMetrics = {\n            cpu: 0, load_avg: 0, memory_percent: 0, memory_used: 0, memory_total: 0,\n            disk_percent: 0, disk_free: 0, network_sent: 0, network_recv: 0\n          }\n          this.historicalData = { timestamps: [], cpu: [], memory: [], disk_read: [], disk_write: [], network_sent: [], network_recv: [] }\n          this.topProcesses = []\n        }\n      } catch (error) {\n        this.connectionStatus = 'disconnected'\n        this.$message.error('获取服务器数据失败: ' + error.message)\n      } finally {\n        this.loading = false\n      }\n    },\n\n    refreshData() {\n      this.loadServerData()\n    },\n\n    onTimeRangeChange() {\n      console.log('🕐 时间范围变化:', this.timeRange)\n      this.loadServerData()\n    },\n\n    toggleAutoRefresh() {\n      if (this.autoRefresh) {\n        this.startAutoRefresh()\n      } else {\n        this.stopAutoRefresh()\n      }\n    },\n\n    startAutoRefresh() {\n      this.stopAutoRefresh()\n      this.refreshTimer = setInterval(() => {\n        this.loadServerData()\n      }, 30000) // 30秒刷新一次\n    },\n\n    stopAutoRefresh() {\n      if (this.refreshTimer) {\n        clearInterval(this.refreshTimer)\n        this.refreshTimer = null\n      }\n    },\n\n    refreshProcesses() {\n      this.loadServerData()\n    },\n\n    editCurrentServer() {\n      this.editingServer = this.currentServerInfo\n      this.showServerConfig = true\n    },\n\n    onServerSaved(server) {\n      this.loadServers()\n      this.showServerConfig = false\n      \n      if (server.id === this.selectedServer) {\n        this.onServerChange()\n      }\n    },\n\n    onServerDeleted(serverId) {\n      this.loadServers()\n      this.showServerConfig = false\n      \n      if (serverId === this.selectedServer) {\n        this.selectedServer = null\n        this.connectionStatus = 'disconnected'\n        this.stopAutoRefresh()\n      }\n    },\n\n    // 状态样式\n    getCpuStatusClass(value) {\n      if (value >= 80) return 'status-critical'\n      if (value >= 60) return 'status-warning'\n      return 'status-normal'\n    },\n\n    getMemoryStatusClass(value) {\n      if (value >= 85) return 'status-critical'\n      if (value >= 70) return 'status-warning'\n      return 'status-normal'\n    },\n\n    getDiskStatusClass(value) {\n      if (value >= 90) return 'status-critical'\n      if (value >= 80) return 'status-warning'\n      return 'status-normal'\n    },\n\n    formatBytes(bytes) {\n      if (bytes === 0) return '0 B'\n      const k = 1024\n      const sizes = ['B', 'KB', 'MB', 'GB']\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]\n    },\n\n    // 图表相关方法\n    initCharts() {\n      this.$nextTick(() => {\n        console.log('🎨 初始化图表...')\n        if (this.$refs.cpuChart) {\n          this.charts.cpu = echarts.init(this.$refs.cpuChart, 'dark')\n          console.log('✅ CPU图表初始化成功')\n        } else {\n          console.log('❌ CPU图表DOM元素未找到')\n        }\n        if (this.$refs.memoryChart) {\n          this.charts.memory = echarts.init(this.$refs.memoryChart, 'dark')\n          console.log('✅ 内存图表初始化成功')\n        } else {\n          console.log('❌ 内存图表DOM元素未找到')\n        }\n        if (this.$refs.diskChart) {\n          this.charts.disk = echarts.init(this.$refs.diskChart, 'dark')\n          console.log('✅ 磁盘图表初始化成功')\n        } else {\n          console.log('❌ 磁盘图表DOM元素未找到')\n        }\n        if (this.$refs.networkChart) {\n          this.charts.network = echarts.init(this.$refs.networkChart, 'dark')\n          console.log('✅ 网络图表初始化成功')\n        } else {\n          console.log('❌ 网络图表DOM元素未找到')\n        }\n\n        // 初始化后立即更新图表（如果有数据）\n        if (this.historicalData && this.historicalData.timestamps && this.historicalData.timestamps.length > 0) {\n          console.log('🔄 图表初始化后立即更新数据')\n          this.updateCharts()\n        }\n      })\n    },\n\n    updateCharts() {\n      console.log('📈 更新图表，时间范围:', this.timeRange)\n      console.log('📈 历史数据:', this.historicalData)\n      this.updateCpuChart()\n      this.updateMemoryChart()\n      this.updateDiskChart()\n      this.updateNetworkChart()\n    },\n\n    updateCpuChart() {\n      if (!this.charts.cpu) {\n        console.log('❌ CPU图表未初始化')\n        return\n      }\n\n      console.log('📊 更新CPU图表，数据:', {\n        timestamps: this.historicalData.timestamps ? this.historicalData.timestamps.length : 0,\n        cpu: this.historicalData.cpu ? this.historicalData.cpu.length : 0,\n        timestampsData: this.historicalData.timestamps,\n        cpuData: this.historicalData.cpu\n      })\n\n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}<br/>CPU使用率: {c}%'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.historicalData.timestamps || []\n        },\n        yAxis: {\n          type: 'value',\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: [{\n          data: this.historicalData.cpu || [],\n          type: 'line',\n          smooth: true,\n          itemStyle: {\n            color: '#52c41a'\n          },\n          areaStyle: {\n            opacity: 0.3\n          }\n        }]\n      }\n\n      this.charts.cpu.setOption(option)\n      console.log('✅ CPU图表更新完成')\n    },\n\n    updateMemoryChart() {\n      if (!this.charts.memory) {\n        console.log('❌ 内存图表未初始化')\n        return\n      }\n\n      console.log('📊 更新内存图表，数据:', {\n        timestamps: this.historicalData.timestamps ? this.historicalData.timestamps.length : 0,\n        memory: this.historicalData.memory ? this.historicalData.memory.length : 0\n      })\n      \n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}<br/>内存使用率: {c}%'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.historicalData.timestamps\n        },\n        yAxis: {\n          type: 'value',\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: [{\n          data: this.historicalData.memory,\n          type: 'line',\n          smooth: true,\n          itemStyle: {\n            color: '#1890ff'\n          },\n          areaStyle: {\n            opacity: 0.3\n          }\n        }]\n      }\n      \n      this.charts.memory.setOption(option)\n    },\n\n    updateDiskChart() {\n      if (!this.charts.disk) {\n        console.log('❌ 磁盘图表未初始化')\n        return\n      }\n\n      console.log('📊 更新磁盘图表，数据:', {\n        timestamps: this.historicalData.timestamps ? this.historicalData.timestamps.length : 0,\n        diskRead: this.historicalData.diskRead ? this.historicalData.diskRead.length : 0,\n        diskWrite: this.historicalData.diskWrite ? this.historicalData.diskWrite.length : 0\n      })\n      \n      const option = {\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['读取', '写入']\n        },\n        grid: {\n          left: '80px',  // 为Y轴标签留出足够空间\n          right: '20px',\n          top: '60px',\n          bottom: '60px'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.historicalData.timestamps\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: value => this.formatBytes(value) + '/s'\n          }\n        },\n        series: [\n          {\n            name: '读取',\n            data: this.historicalData.diskRead || this.historicalData.disk_read || [],\n            type: 'line',\n            smooth: true,\n            itemStyle: {\n              color: '#faad14'\n            }\n          },\n          {\n            name: '写入',\n            data: this.historicalData.diskWrite || this.historicalData.disk_write || [],\n            type: 'line',\n            smooth: true,\n            itemStyle: {\n              color: '#f5222d'\n            }\n          }\n        ]\n      }\n      \n      this.charts.disk.setOption(option)\n    },\n\n    updateNetworkChart() {\n      if (!this.charts.network) {\n        console.log('❌ 网络图表未初始化')\n        return\n      }\n\n      console.log('📊 更新网络图表，数据:', {\n        timestamps: this.historicalData.timestamps ? this.historicalData.timestamps.length : 0,\n        networkIn: this.historicalData.networkIn ? this.historicalData.networkIn.length : 0,\n        networkOut: this.historicalData.networkOut ? this.historicalData.networkOut.length : 0\n      })\n      \n      const option = {\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['发送', '接收']\n        },\n        grid: {\n          left: '80px',  // 为Y轴标签留出足够空间\n          right: '20px',\n          top: '60px',\n          bottom: '60px'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.historicalData.timestamps\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: value => this.formatBytes(value) + '/s'\n          }\n        },\n        series: [\n          {\n            name: '发送',\n            data: this.historicalData.networkOut || this.historicalData.network_sent || [],\n            type: 'line',\n            smooth: true,\n            itemStyle: {\n              color: '#722ed1'\n            }\n          },\n          {\n            name: '接收',\n            data: this.historicalData.networkIn || this.historicalData.network_recv || [],\n            type: 'line',\n            smooth: true,\n            itemStyle: {\n              color: '#13c2c2'\n            }\n          }\n        ]\n      }\n      \n      this.charts.network.setOption(option)\n    },\n\n    toggleChartFullscreen(chartType) {\n      // 图表全屏功能，可以后续实现\n      this.$message.info('全屏功能开发中...')\n    },\n\n    destroyCharts() {\n      Object.values(this.charts).forEach(chart => {\n        if (chart) {\n          chart.dispose()\n        }\n      })\n    },\n\n    // 强制重新渲染所有图表\n    forceResizeCharts() {\n      console.log('🔄 强制重新渲染图表...')\n      this.$nextTick(() => {\n        Object.values(this.charts).forEach(chart => {\n          if (chart) {\n            chart.resize()\n          }\n        })\n      })\n    },\n\n    // 重新初始化图表\n    reinitCharts() {\n      console.log('🔄 重新初始化图表...')\n      this.destroyCharts()\n      this.charts = {\n        cpu: null,\n        memory: null,\n        disk: null,\n        network: null\n      }\n      setTimeout(() => {\n        this.initCharts()\n      }, 100)\n    },\n\n    // 生成测试数据\n    generateTestData() {\n      console.log('🎲 生成测试数据...')\n\n      const now = new Date()\n      const timestamps = []\n      const cpu = []\n      const memory = []\n      const diskRead = []\n      const diskWrite = []\n      const networkIn = []\n      const networkOut = []\n\n      // 根据时间范围生成不同数量的数据点\n      let dataPoints = 30\n      let intervalMinutes = 1\n\n      switch (this.timeRange) {\n        case '5m':\n          dataPoints = 30\n          intervalMinutes = 0.2 // 12秒\n          break\n        case '15m':\n          dataPoints = 30\n          intervalMinutes = 0.5 // 30秒\n          break\n        case '1h':\n          dataPoints = 30\n          intervalMinutes = 2 // 2分钟\n          break\n        case '6h':\n          dataPoints = 30\n          intervalMinutes = 12 // 12分钟\n          break\n        case '24h':\n          dataPoints = 30\n          intervalMinutes = 48 // 48分钟\n          break\n      }\n\n      for (let i = 0; i < dataPoints; i++) {\n        const time = new Date(now.getTime() - (dataPoints - i) * intervalMinutes * 60 * 1000)\n        timestamps.push(time.toLocaleTimeString())\n\n        // 生成随机但有趋势的数据\n        cpu.push(Math.max(0, Math.min(100, 30 + Math.sin(i * 0.3) * 20 + Math.random() * 10)))\n        memory.push(Math.max(0, Math.min(100, 40 + Math.sin(i * 0.2) * 15 + Math.random() * 8)))\n        diskRead.push(Math.max(0, 50 + Math.sin(i * 0.4) * 30 + Math.random() * 20))\n        diskWrite.push(Math.max(0, 30 + Math.sin(i * 0.5) * 20 + Math.random() * 15))\n        networkIn.push(Math.max(0, 100 + Math.sin(i * 0.3) * 50 + Math.random() * 30))\n        networkOut.push(Math.max(0, 80 + Math.sin(i * 0.4) * 40 + Math.random() * 25))\n      }\n\n      this.historicalData = {\n        timestamps,\n        cpu,\n        memory,\n        diskRead,\n        diskWrite,\n        networkIn,\n        networkOut\n      }\n\n      console.log('✅ 测试数据生成完成:', this.historicalData)\n\n      // 更新图表\n      this.updateCharts()\n\n      this.$message.success('测试数据生成成功！')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.server-monitor {\n  background: #0f1419;\n  color: #d9d9d9;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.monitor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  padding: 20px;\n  background: #1f2329;\n  border-radius: 8px;\n  border: 1px solid #2f3349;\n}\n\n.server-selector {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.time-controls {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.server-overview {\n  margin-bottom: 30px;\n  padding: 20px;\n  background: #1f2329;\n  border-radius: 8px;\n  border: 1px solid #2f3349;\n}\n\n.server-info h2 {\n  margin: 0 0 10px 0;\n  color: #ffffff;\n}\n\n.server-details {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  color: #8c8c8c;\n}\n\n.metrics-cards {\n  margin-bottom: 30px;\n}\n\n.metric-card {\n  background: #1f2329;\n  border: 1px solid #2f3349;\n  border-radius: 8px;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.metric-card:hover {\n  border-color: #52c41a;\n  box-shadow: 0 4px 12px rgba(82, 196, 26, 0.15);\n}\n\n.metric-icon {\n  font-size: 2.5em;\n  margin-right: 20px;\n  opacity: 0.8;\n}\n\n.metric-card.cpu .metric-icon {\n  color: #52c41a;\n}\n\n.metric-card.memory .metric-icon {\n  color: #1890ff;\n}\n\n.metric-card.disk .metric-icon {\n  color: #faad14;\n}\n\n.metric-card.network .metric-icon {\n  color: #722ed1;\n}\n\n.metric-content {\n  flex: 1;\n}\n\n.metric-value {\n  font-size: 2.2em;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.metric-label {\n  font-size: 1em;\n  color: #8c8c8c;\n  margin-bottom: 5px;\n}\n\n.metric-detail {\n  font-size: 0.9em;\n  color: #595959;\n}\n\n.status-normal {\n  color: #52c41a;\n}\n\n.status-warning {\n  color: #faad14;\n}\n\n.status-critical {\n  color: #f5222d;\n}\n\n.charts-section {\n  margin-bottom: 30px;\n}\n\n.chart-panel {\n  background: #1f2329;\n  border: 1px solid #2f3349;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.panel-header {\n  padding: 15px 20px;\n  border-bottom: 1px solid #2f3349;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #262c36;\n}\n\n.panel-header h3 {\n  margin: 0;\n  color: #ffffff;\n  font-size: 1.1em;\n}\n\n.panel-controls {\n  display: flex;\n  gap: 10px;\n}\n\n.chart-container {\n  height: 300px;\n  width: 100%;\n}\n\n.process-section {\n  background: #1f2329;\n  border: 1px solid #2f3349;\n  border-radius: 8px;\n  padding: 20px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.section-header h3 {\n  margin: 0;\n  color: #ffffff;\n}\n\n.no-server-selected,\n.connection-failed {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 400px;\n}\n\n.empty-state,\n.error-state {\n  text-align: center;\n  color: #8c8c8c;\n}\n\n.empty-state i,\n.error-state i {\n  font-size: 4em;\n  margin-bottom: 20px;\n  color: #595959;\n}\n\n.empty-state h3,\n.error-state h3 {\n  margin: 0 0 10px 0;\n  color: #ffffff;\n}\n\n.empty-state p,\n.error-state p {\n  margin: 0 0 20px 0;\n}\n\n.setup-steps {\n  margin: 30px 0;\n  text-align: left;\n  max-width: 400px;\n}\n\n.step {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #262c36;\n  border-radius: 6px;\n  border-left: 3px solid #52c41a;\n}\n\n.step-number {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  background: #52c41a;\n  color: #ffffff;\n  border-radius: 50%;\n  font-weight: bold;\n  font-size: 12px;\n  margin-right: 12px;\n  flex-shrink: 0;\n}\n\n.step-text {\n  color: #d9d9d9;\n  font-size: 14px;\n}\n\n.error-details {\n  text-align: left;\n  margin: 20px 0;\n  padding: 15px;\n  background: #262c36;\n  border-radius: 6px;\n  border-left: 3px solid #f5222d;\n}\n\n.error-details p {\n  margin: 0 0 10px 0;\n  color: #ffffff;\n  font-weight: bold;\n}\n\n.error-details ul {\n  margin: 0;\n  padding-left: 20px;\n  color: #8c8c8c;\n}\n\n.error-details li {\n  margin-bottom: 5px;\n}\n\n.error-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n/* Element UI 样式覆盖 */\n.server-monitor .el-select {\n  width: 300px;\n}\n\n.server-monitor .el-table {\n  background: transparent;\n  color: #d9d9d9;\n}\n\n.server-monitor .el-table th {\n  background: #262c36;\n  color: #ffffff;\n  border-bottom: 1px solid #2f3349;\n}\n\n.server-monitor .el-table td {\n  border-bottom: 1px solid #2f3349;\n}\n\n.server-monitor .el-table tr {\n  background: transparent;\n}\n\n.server-monitor .el-table tr:hover {\n  background: #262c36;\n}\n\n.server-monitor .el-button {\n  border-color: #2f3349;\n}\n\n.server-monitor .el-button:hover {\n  border-color: #52c41a;\n  color: #52c41a;\n}\n\n.server-monitor .el-button--primary {\n  background: #52c41a;\n  border-color: #52c41a;\n}\n\n.server-monitor .el-button--primary:hover {\n  background: #73d13d;\n  border-color: #73d13d;\n}\n\n.server-monitor .el-tag--success {\n  background: rgba(82, 196, 26, 0.2);\n  border-color: #52c41a;\n  color: #52c41a;\n}\n\n.server-monitor .el-tag--danger {\n  background: rgba(245, 34, 45, 0.2);\n  border-color: #f5222d;\n  color: #f5222d;\n}\n\n@media (max-width: 768px) {\n  .server-monitor {\n    padding: 10px;\n  }\n\n  .monitor-header {\n    flex-direction: column;\n    gap: 20px;\n  }\n\n  .server-selector,\n  .time-controls {\n    width: 100%;\n    justify-content: center;\n  }\n\n  .metric-card {\n    margin-bottom: 15px;\n  }\n\n  .chart-container {\n    height: 250px;\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/server-monitor/dashboard.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"server-monitor\"},[_c('div',{staticClass:\"monitor-header\"},[_c('div',{staticClass:\"server-selector\"},[_c('el-select',{attrs:{\"placeholder\":\"选择服务器\"},on:{\"change\":_vm.onServerChange},model:{value:(_vm.selectedServer),callback:function ($$v) {_vm.selectedServer=$$v},expression:\"selectedServer\"}},_vm._l((_vm.servers),function(server){return _c('el-option',{key:server.id,attrs:{\"label\":((server.name) + \" (\" + (server.host) + \")\"),\"value\":server.id}})}),1),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.showServerConfig = true}}},[_vm._v(\"配置服务器\")])],1),_vm._v(\" \"),_c('div',{staticClass:\"time-controls\"},[_c('el-select',{on:{\"change\":_vm.onTimeRangeChange},model:{value:(_vm.timeRange),callback:function ($$v) {_vm.timeRange=$$v},expression:\"timeRange\"}},[_c('el-option',{attrs:{\"label\":\"最近5分钟\",\"value\":\"5m\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"最近15分钟\",\"value\":\"15m\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"最近1小时\",\"value\":\"1h\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"最近6小时\",\"value\":\"6h\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"最近24小时\",\"value\":\"24h\"}})],1),_vm._v(\" \"),_c('el-button',{attrs:{\"loading\":_vm.loading},on:{\"click\":_vm.refreshData}},[_c('i',{staticClass:\"el-icon-refresh\"}),_vm._v(\" 刷新\\n      \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"warning\",\"size\":\"small\"},on:{\"click\":_vm.reinitCharts}},[_c('i',{staticClass:\"el-icon-refresh-right\"}),_vm._v(\" 重新初始化图表\\n      \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"success\",\"size\":\"small\"},on:{\"click\":_vm.generateTestData}},[_c('i',{staticClass:\"el-icon-data-line\"}),_vm._v(\" 生成测试数据\\n      \")]),_vm._v(\" \"),_c('el-switch',{attrs:{\"active-text\":\"自动刷新\"},on:{\"change\":_vm.toggleAutoRefresh},model:{value:(_vm.autoRefresh),callback:function ($$v) {_vm.autoRefresh=$$v},expression:\"autoRefresh\"}})],1)]),_vm._v(\" \"),(_vm.selectedServer)?_c('div',{staticClass:\"server-overview\"},[_c('div',{staticClass:\"server-info\"},[_c('h2',[_vm._v(_vm._s(_vm.currentServerInfo.name))]),_vm._v(\" \"),_c('div',{staticClass:\"server-details\"},[_c('span',[_vm._v(_vm._s(_vm.currentServerInfo.host)+\":\"+_vm._s(_vm.currentServerInfo.port))]),_vm._v(\" \"),_c('el-tag',{attrs:{\"type\":_vm.connectionStatus === 'connected' ? 'success' : 'danger',\"size\":\"small\"}},[_vm._v(\"\\n          \"+_vm._s(_vm.connectionStatus === 'connected' ? '已连接' : '连接失败')+\"\\n        \")])],1)])]):_vm._e(),_vm._v(\" \"),(_vm.selectedServer && _vm.connectionStatus === 'connected')?_c('div',{staticClass:\"metrics-cards\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-card cpu\"},[_c('div',{staticClass:\"metric-icon\"},[_c('i',{staticClass:\"el-icon-cpu\"})]),_vm._v(\" \"),_c('div',{staticClass:\"metric-content\"},[_c('div',{staticClass:\"metric-value\",class:_vm.getCpuStatusClass(_vm.currentMetrics.cpu)},[_vm._v(\"\\n              \"+_vm._s(_vm.currentMetrics.cpu)+\"%\\n            \")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"CPU使用率\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-detail\"},[_vm._v(\"\\n              负载: \"+_vm._s(_vm.currentMetrics.load_avg)+\"\\n            \")])])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-card memory\"},[_c('div',{staticClass:\"metric-icon\"},[_c('i',{staticClass:\"el-icon-memory-card\"})]),_vm._v(\" \"),_c('div',{staticClass:\"metric-content\"},[_c('div',{staticClass:\"metric-value\",class:_vm.getMemoryStatusClass(_vm.currentMetrics.memory_percent)},[_vm._v(\"\\n              \"+_vm._s(_vm.currentMetrics.memory_percent)+\"%\\n            \")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"内存使用率\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-detail\"},[_vm._v(\"\\n              \"+_vm._s(_vm.currentMetrics.memory_used)+\"GB / \"+_vm._s(_vm.currentMetrics.memory_total)+\"GB\\n            \")])])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-card disk\"},[_c('div',{staticClass:\"metric-icon\"},[_c('i',{staticClass:\"el-icon-folder\"})]),_vm._v(\" \"),_c('div',{staticClass:\"metric-content\"},[_c('div',{staticClass:\"metric-value\",class:_vm.getDiskStatusClass(_vm.currentMetrics.disk_percent)},[_vm._v(\"\\n              \"+_vm._s(_vm.currentMetrics.disk_percent)+\"%\\n            \")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"磁盘使用率\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-detail\"},[_vm._v(\"\\n              剩余: \"+_vm._s(_vm.currentMetrics.disk_free)+\"GB\\n            \")])])])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":6}},[_c('div',{staticClass:\"metric-card network\"},[_c('div',{staticClass:\"metric-icon\"},[_c('i',{staticClass:\"el-icon-connection\"})]),_vm._v(\" \"),_c('div',{staticClass:\"metric-content\"},[_c('div',{staticClass:\"metric-value\"},[_vm._v(\"\\n              \"+_vm._s(_vm.formatBytes(_vm.currentMetrics.network_sent))+\"/s\\n            \")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-label\"},[_vm._v(\"网络发送\")]),_vm._v(\" \"),_c('div',{staticClass:\"metric-detail\"},[_vm._v(\"\\n              接收: \"+_vm._s(_vm.formatBytes(_vm.currentMetrics.network_recv))+\"/s\\n            \")])])])])],1)],1):_vm._e(),_vm._v(\" \"),(_vm.selectedServer && _vm.connectionStatus === 'connected')?_c('div',{staticClass:\"charts-section\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-panel\"},[_c('div',{staticClass:\"panel-header\"},[_c('h3',[_vm._v(\"CPU使用率趋势\")]),_vm._v(\" \"),_c('div',{staticClass:\"panel-controls\"},[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){return _vm.toggleChartFullscreen('cpu')}}},[_c('i',{staticClass:\"el-icon-full-screen\"})])],1)]),_vm._v(\" \"),_c('div',{ref:\"cpuChart\",staticClass:\"chart-container\"})])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-panel\"},[_c('div',{staticClass:\"panel-header\"},[_c('h3',[_vm._v(\"内存使用趋势\")]),_vm._v(\" \"),_c('div',{staticClass:\"panel-controls\"},[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){return _vm.toggleChartFullscreen('memory')}}},[_c('i',{staticClass:\"el-icon-full-screen\"})])],1)]),_vm._v(\" \"),_c('div',{ref:\"memoryChart\",staticClass:\"chart-container\"})])])],1),_vm._v(\" \"),_c('el-row',{staticStyle:{\"margin-top\":\"20px\"},attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-panel\"},[_c('div',{staticClass:\"panel-header\"},[_c('h3',[_vm._v(\"磁盘I/O\")]),_vm._v(\" \"),_c('div',{staticClass:\"panel-controls\"},[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){return _vm.toggleChartFullscreen('disk')}}},[_c('i',{staticClass:\"el-icon-full-screen\"})])],1)]),_vm._v(\" \"),_c('div',{ref:\"diskChart\",staticClass:\"chart-container\"})])]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"chart-panel\"},[_c('div',{staticClass:\"panel-header\"},[_c('h3',[_vm._v(\"网络流量\")]),_vm._v(\" \"),_c('div',{staticClass:\"panel-controls\"},[_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":function($event){return _vm.toggleChartFullscreen('network')}}},[_c('i',{staticClass:\"el-icon-full-screen\"})])],1)]),_vm._v(\" \"),_c('div',{ref:\"networkChart\",staticClass:\"chart-container\"})])])],1)],1):_vm._e(),_vm._v(\" \"),(_vm.selectedServer && _vm.connectionStatus === 'connected')?_c('div',{staticClass:\"process-section\"},[_c('div',{staticClass:\"section-header\"},[_c('h3',[_vm._v(\"进程监控\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"size\":\"mini\"},on:{\"click\":_vm.refreshProcesses}},[_vm._v(\"刷新进程\")])],1),_vm._v(\" \"),_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.topProcesses}},[_c('el-table-column',{attrs:{\"prop\":\"pid\",\"label\":\"PID\",\"width\":\"80\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"name\",\"label\":\"进程名\",\"width\":\"200\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"cpu_percent\",\"label\":\"CPU%\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',{class:_vm.getCpuStatusClass(scope.row.cpu_percent)},[_vm._v(\"\\n            \"+_vm._s(scope.row.cpu_percent)+\"%\\n          \")])]}}],null,false,4156195574)}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"memory_percent\",\"label\":\"内存%\",\"width\":\"100\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',{class:_vm.getMemoryStatusClass(scope.row.memory_percent)},[_vm._v(\"\\n            \"+_vm._s(scope.row.memory_percent)+\"%\\n          \")])]}}],null,false,120968529)}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"memory_mb\",\"label\":\"内存(MB)\",\"width\":\"120\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"status\",\"label\":\"状态\",\"width\":\"100\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"create_time\",\"label\":\"启动时间\"}})],1)],1):_vm._e(),_vm._v(\" \"),(!_vm.selectedServer)?_c('div',{staticClass:\"no-server-selected\"},[_c('div',{staticClass:\"empty-state\"},[_c('i',{staticClass:\"el-icon-monitor\"}),_vm._v(\" \"),_c('h3',[_vm._v(\"欢迎使用服务器监控系统\")]),_vm._v(\" \"),_c('p',[_vm._v(\"请先配置要监控的服务器\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"large\"},on:{\"click\":function($event){_vm.showServerConfig = true}}},[_c('i',{staticClass:\"el-icon-plus\"}),_vm._v(\" 配置第一台服务器\\n      \")])],1)]):_vm._e(),_vm._v(\" \"),(_vm.selectedServer && _vm.connectionStatus === 'disconnected')?_c('div',{staticClass:\"connection-failed\"},[_c('div',{staticClass:\"error-state\"},[_c('i',{staticClass:\"el-icon-warning\"}),_vm._v(\" \"),_c('h3',[_vm._v(\"无法连接到服务器\")]),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.currentServerInfo.name)+\" (\"+_vm._s(_vm.currentServerInfo.host)+\")\")]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('div',{staticClass:\"error-actions\"},[_c('el-button',{attrs:{\"loading\":_vm.loading},on:{\"click\":_vm.testConnection}},[_c('i',{staticClass:\"el-icon-refresh\"}),_vm._v(\" 重新连接\\n        \")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.editCurrentServer}},[_c('i',{staticClass:\"el-icon-edit\"}),_vm._v(\" 编辑配置\\n        \")]),_vm._v(\" \"),_c('el-button',{on:{\"click\":_vm.loadServerData}},[_c('i',{staticClass:\"el-icon-connection\"}),_vm._v(\" 获取数据\\n        \")])],1)])]):_vm._e(),_vm._v(\" \"),_c('server-config-dialog',{attrs:{\"visible\":_vm.showServerConfig,\"server\":_vm.editingServer},on:{\"update:visible\":function($event){_vm.showServerConfig=$event},\"save\":_vm.onServerSaved,\"delete\":_vm.onServerDeleted}})],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"setup-steps\"},[_c('div',{staticClass:\"step\"},[_c('span',{staticClass:\"step-number\"},[_vm._v(\"1\")]),_vm._v(\" \"),_c('span',{staticClass:\"step-text\"},[_vm._v(\"点击\\\"配置服务器\\\"按钮\")])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_c('span',{staticClass:\"step-number\"},[_vm._v(\"2\")]),_vm._v(\" \"),_c('span',{staticClass:\"step-text\"},[_vm._v(\"填写服务器连接信息\")])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_c('span',{staticClass:\"step-number\"},[_vm._v(\"3\")]),_vm._v(\" \"),_c('span',{staticClass:\"step-text\"},[_vm._v(\"测试连接并保存配置\")])]),_vm._v(\" \"),_c('div',{staticClass:\"step\"},[_c('span',{staticClass:\"step-number\"},[_vm._v(\"4\")]),_vm._v(\" \"),_c('span',{staticClass:\"step-text\"},[_vm._v(\"选择服务器开始监控\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"error-details\"},[_c('p',[_vm._v(\"可能的原因：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"服务器未启动或网络不通\")]),_vm._v(\" \"),_c('li',[_vm._v(\"SSH服务未运行或端口被阻拦\")]),_vm._v(\" \"),_c('li',[_vm._v(\"用户名或密码错误\")]),_vm._v(\" \"),_c('li',[_vm._v(\"防火墙阻止连接\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2dd160e7\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/server-monitor/dashboard.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2dd160e7\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./dashboard.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./dashboard.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./dashboard.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2dd160e7\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./dashboard.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2dd160e7\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/server-monitor/dashboard.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}